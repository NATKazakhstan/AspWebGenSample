/*
 * Generated by: Sergey.Shpakovskiy
 * Generated at: 1.0.0.2
 * Copyright © JSC NAT Kazakhstan 2011
 */
#pragma warning disable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Drawing.Design;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net.Mail;
using System.Net;
using System.Security.Principal;
using System.Text;
using System.Xml.Linq;
using System.Web;
using System.Web.Compilation;
using System.Web.Configuration;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using SampleDictionaries.Properties;


using Nat.Tools.Specific;
using Nat.Web.Controls;
using Nat.Web.Controls.BaseLogic;
using Nat.Web.Controls.GenerationClasses;
using Nat.Web.Controls.GenerationClasses.Data;
using Nat.Web.Controls.GenerationClasses.Filter;
using Nat.Web.Controls.GenerationClasses.Navigator;
using Nat.Web.Controls.HistoryFilters;
using Nat.Web.Controls.Preview;
using Nat.Web.Tools;
using Nat.Web.Tools.Security;
using Nat.Web.Tools.WorkFlow;
using Nat.Web.Tools.Export;
using Nat.Web.WorkFlow;
using InformationValues = SampleDictionaries.DIC_MySecondDictionaryJournalDataSourceView.InformationValues;
using LookupValues = SampleDictionaries.DIC_MySecondDictionaryJournalDataSourceView.LookupValues;
using AccessOptions = SampleDictionaries.DIC_MySecondDictionaryAccessOptions;
using TotalInfo = SampleDictionaries.DIC_MySecondDictionaryJournalDataSourceView.TotalInfo;
using TableResources = SampleDictionaries.Properties.TableResources;
using SampleDictionaries;
using SampleDictionaries.UserControls;
using SampleDictionaries.Properties;
using Nat.Web.Tools.MailMessageContent;
using SampleDictionaries.Security;
using Nat.Web.Tools.ExtNet;
using Nat.Web.Tools.ExtNet.Extenders;
using Nat.Web.Tools.ExtNet.ExtNetConfig;
using Ext.Net;
using GridColumn = Nat.Web.Tools.ExtNet.GridColumn;
using GridButtonsColumn = Nat.Web.Tools.ExtNet.GridButtonsColumn;
using AdditionalButtons = Nat.Web.Controls.ExtNet.AdditionalButtons;
using BrowseFilterParameters = Nat.Web.Tools.ExtNet.ExtNetBrowseFilterParameters;

namespace SampleDictionaries.UserControls
{
    /// <summary>
    /// Контрол для отображения таблицы "My Second Dictionary" (DIC_MySecondDictionary)
    /// </summary>
    [DefaultEvent("SelectedIndexChanged")]
    [ControlValueProperty("SelectedValue")]
    public partial class DIC_MySecondDictionaryJournal : Nat.Web.Controls.ExtNet.Generation.AbstractUserControl<long>, IFilterSupport, IAccessControl, IPostBackEventHandler
    {
        public DIC_MySecondDictionaryJournal()
        {
            FilterControl = string.Empty;
            DefaultFilter = string.Empty;
            NeedMultipleSelect = false;
        }

        #region Fields
        
        private IFilterControl filterControl;
        private DIC_MySecondDictionaryFilter internalfilterControl;
        private bool isFilterSeted;
        private ISelectedValue parentControl;
        private bool inited;
        private long? selectedID = new long?();
        private DBDataContext _db;
        protected GridColumns _gridColumns;
        private List<IJournalLogic> _logics;
        private bool _selectedIndexChanged;
        private Dictionary<string, List<FilterItem>> _filterValues;
        private SelectModeDIC_MySecondDictionary? select = null;
        private ViewModeDIC_MySecondDictionary? viewMode = null;
        
        private bool storeLoadExecuted;
        
        #endregion
        
        #region Properties
        
        public bool NeedMultipleSelect { get; set; }
        public Type ParentControlTableType { get; set; }
        
        [DefaultValue("")]
        public string DefaultFilter { get; set; }
        
        [DefaultValue(null)]
        public string FilterByParentControl { get; set; }
        
        [DefaultValue(false)]
        public bool FilterByParentControlIfExistsValue { get; set; }
        
        [DefaultValue(null)]
        public string ParemeterNameParentControl { get; set; }
        
        [DefaultValue("")]
        [IDReferenceProperty]
        [TypeConverter(typeof(FilterConverter))]
        [Themeable(false)]
        public string FilterControl { get; set; }
        
        public override string Header
        {
            get { return ProjectHeader + " -&gt; " + TableHeader; }
        }
        
        public override string HeaderRu
        {
            get { return ProjectHeaderRu + " -&gt; " + TableHeaderRu; }
        }
        
        public override string HeaderKz
        {
            get { return ProjectHeaderKz + " -&gt; " + TableHeaderKz; }
        }
        
        partial void GetTableHeader(ref string header);
        
        public override string TableHeader
        {
            get
            {
                var header = DIC_MySecondDictionaryResources.Header;
                GetTableHeader(ref header);
                return header;
            }
        }
        
        public override string TableHeaderRu
        {
            get { return DIC_MySecondDictionaryResources.ResourceManager.GetString("Header", new CultureInfo("ru-ru")); }
        }
        
        public override string TableHeaderKz
        {
            get { return DIC_MySecondDictionaryResources.ResourceManager.GetString("Header", new CultureInfo("kk-kz")); }
        }
        
        public override string ProjectHeader
        {
            get { return DIC_MySecondDictionaryResources.ProjectHeader; }
        }
        
        public override string ProjectHeaderRu
        {
            get { return DIC_MySecondDictionaryResources.ResourceManager.GetString("ProjectHeader", new CultureInfo("ru-ru")); }
        }
        
        public override string ProjectHeaderKz
        {
            get { return DIC_MySecondDictionaryResources.ResourceManager.GetString("ProjectHeader", new CultureInfo("kk-kz")); }
        }
        
        public DBDataContext DB
        {
            get 
            {
                if (_db == null)
                {
                    _db = new DBDataContext(SpecificInstances.DbFactory.CreateConnection());
                }
        
                return _db;
            }
        }
        
        public override string TableName
        {
            get { return "DIC_MySecondDictionary"; }
        }
        
        protected Dictionary<string, List<FilterItem>> FilterValues
        {
            get
            {
                if (_filterValues == null)
                    _filterValues = Url.GetFilterItemsDic("DIC_MySecondDictionary");
                return _filterValues;
            }
        }
        
        
        internal IFilterControl FilterControlInternal
        {
            get 
            {
                if (Parent != null && filterControl == null)
                {
                    filterControl = (IFilterControl)Parent.FindControl(FilterControl);
                }
                return filterControl;
            }
        }
        
        [Browsable(false)]
        protected bool HasParentControl
        {
            get { return ParentControlInternal != null; }
        }
        
        internal ISelectedValue ParentControlInternal
        {
            get
            {
                if (Parent != null && parentControl == null)
                {
                    parentControl = (ISelectedValue)Parent.FindControl(ParentControl) ?? (ISelectedValue)this.FindControl(ParentControl);
                    GetParentControl(ref parentControl);
                }
                return parentControl;
            }
            set
            {
                parentControl = value;
            }
        }
        
        
        
        protected SelectModeDIC_MySecondDictionary Select
        {
            get 
            {
                try
                {
                    if (select == null) select = (SelectModeDIC_MySecondDictionary?)Enum.Parse(typeof(SelectModeDIC_MySecondDictionary), Url.SelectMode ?? "none", true);
                }
                catch
                {
                    select = SelectModeDIC_MySecondDictionary.none;
                }
                return select.Value;
            }
        }
        
        protected ViewModeDIC_MySecondDictionary ViewMode
        {
            get 
            {
                try
                {
                    if (viewMode == null) viewMode = (ViewModeDIC_MySecondDictionary?)Enum.Parse(typeof(ViewModeDIC_MySecondDictionary), Url.ViewMode ?? "none", true);
                }
                catch
                {
                    viewMode = ViewModeDIC_MySecondDictionary.none;
                }
                return viewMode.Value;
            }
        }
        private LogMonitor _logMonitor;
        protected LogMonitor LogMonitor
        {
            get
            {
                if(_logMonitor == null)
                {
                    _logMonitor = new LogMonitor();
                    _logMonitor.Init();
                }
                return _logMonitor;
            }
        }
        
        protected string StoreLoadHandler { get; set; }
        
        [Browsable(false)]
        public override long? SelectedValueKey
        {
            get 
            {
                throw new NotImplementedException();
            }
        }
        
        internal GridPanel Grid
        {
            get { return grid; }
        }
        
        public string DataSessionKey
        {
            get { return (string)ViewState["DataSessionKey"]; }
            set { ViewState["DataSessionKey"] = value; }
        }
        
        #region ISelectedValue Members
        
        [Browsable(false)]
        public override long SelectedValueLong
        {
            get 
            { 
                throw new NotImplementedException();
            }
        }
        
        public long? ParentID { get; set; }
        public bool IsSelectParentRows { get; set; }
        
        [Browsable(false)]
        public long? SelectedValueOrParentValue
        {
            get 
            {
                return SelectedValueKey;
            }
        }
        
        [Browsable(false)]
        public override object SelectedValue
        {
            get { return SelectedValueKey; }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public override DataKey SelectedDataKey
        {
            get 
            {
                throw new NotImplementedException();
            }
        }
        
        [DefaultValue("ID")]
        [Editor(
            "System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
            , typeof(UITypeEditor))]
        [TypeConverter(typeof(StringArrayConverter))]
        [Category("Data")]
        public override string[] DataKeyNames
        {
            get 
            { 
                throw new NotImplementedException();
            }
        
            set
            { 
                throw new NotImplementedException();
            }
        }
        
        public override Type TableType
        {
            get { return typeof(DIC_MySecondDictionary); }
        }
        
        #endregion
        
        #endregion
        
        #region Methods
        
        private List<IJournalLogic> GetLogics()
        {
            if (_logics == null)
                _logics = new List<IJournalLogic>(new IJournalLogic[] { new LocalizationColumnVisible() });
            return _logics;
        }
        
        protected IFilterControl GetFilterControl(DBDataContext db)
        {
            SetFilterText(string.Empty, FilterHidden.Text);
            InitializeSelectedValues();
            var filterControlInternal = (DIC_MySecondDictionaryFilter)FilterControlInternal ?? internalfilterControl;
            MainPageUrlBuilder pageUrlBuilder;
            if (filterControlInternal == null)
            {
                filterControlInternal = (DIC_MySecondDictionaryFilter)BaseMainPage.LoadControl(Page, GetDefaultFilterControl());
                pageUrlBuilder = Url.Clone();
                filterControlInternal.SetUrl(pageUrlBuilder);
                internalfilterControl = filterControlInternal;
            }
            else
                pageUrlBuilder = Url;
            filterControlInternal.SetDB(db);
            if (!FilterByParentControlIfExistsValue || ParentControlInternal.SelectedValue != null)
            {
                filterControlInternal.FilterByParentControl = FilterByParentControl;
                filterControlInternal.ParentControl = ParentControlInternal;
            }
            else
            {
                filterControlInternal.FilterByParentControl = null;
                filterControlInternal.ParentControl = null;
            }
            filterControlInternal.SelectedID = selectedID;
            filterControlInternal.ShowHistory = Url.ShowHistory;
            filterControlInternal.SelectedValues = SelectedValues;
            if (Url.GetFilter("DIC_MySecondDictionary") == null && NavigatorControl.Values.DIC_MySecondDictionary == null)
            {
                var defFilter = filterControlInternal.GetDefaultFilter();
                FilterHidden.Text = defFilter;
                Url.SetFilter("DIC_MySecondDictionary", defFilter);
                pageUrlBuilder.SetFilter("DIC_MySecondDictionary", defFilter);
                Url.CreateUrl();
                pageUrlBuilder.CreateUrl();
                filterControlInternal.SetUrl(pageUrlBuilder);
            }
            InitializeFilterControl(filterControlInternal);
            if (filterPlaceHolder.ContentControls.Count == 0 && Url.ShowFilter)
            {
                filterPlaceHolder.Visible = true;
                filterPlaceHolder.ContentControls.Add(filterControlInternal);
            }
        
            return filterControlInternal;
        }
        
        public string GetDefaultFilterControl()
        {
            return "DIC_MySecondDictionaryFilter";
        }
        
        private void InitColumnsInternal()
        {
            var isKZ = LocalizationHelper.IsCultureKZ;
            var columns = new List<GridColumn>();
            
            columns.Add(new GridColumn()
                            {
                                ColumnName = "__icons",
                                Visible = false,
                                
                                CanEdit = false,
                            });
            columns.Add(new GridButtonsColumn()
                            {
                                ColumnName = "__buttons",
                                EditUrl = "/EmptyPage.aspx/data/DIC_MySecondDictionaryEdit?refDIC_MySecondDictionary={0}",
                                LookUrl = "/EmptyPage.aspx/data/DIC_MySecondDictionaryEdit/read?refDIC_MySecondDictionary={0}",
                                EditVisible = AccessOptions.CheckPermitEdit(),
                                DeleteVisible = AccessOptions.CheckPermitDelete(),
                                CanEdit = false,
                                Width = "84px",
                            });
            
            var column_Name =
                new GridColumn()
                         {
                             Header = DIC_MySecondDictionaryResources.Name__Header,
                             Sort = "Name",
                             Group = DIC_MySecondDictionaryResources.Name__GridGroup,
                             ColumnName = "Name",
                         };
            column_Name.Width = string.Empty;
            column_Name.ModelFieldType = ModelFieldType.String;
            column_Name.DefaultHidden = false;
            column_Name.ServerMapping = "Item.Name";
            column_Name.HasFilter = true;
            column_Name.CanEdit = true;
            column_Name.ControlID = "Name_{0}";
            columns.Add(column_Name);
            var column_refFirstDictionary =
                new GridColumn()
                         {
                             Header = DIC_MySecondDictionaryResources.refFirstDictionary__Header,
                             Sort = isKZ ? "DIC_MyFirstDictionary_refFirstDictionary.Name" : "DIC_MyFirstDictionary_refFirstDictionary.Name",
                             Group = DIC_MySecondDictionaryResources.refFirstDictionary__GridGroup,
                             ColumnName = "refFirstDictionary",
                             TableName = "DIC_MyFirstDictionary",
                         };
            column_refFirstDictionary.Width = string.Empty;
            column_refFirstDictionary.ModelFieldType = ModelFieldType.String;
            column_refFirstDictionary.DefaultHidden = false;
            column_refFirstDictionary.ColumnNameIndex = "refFirstDictionary_Name";
            column_refFirstDictionary.ColumnNameIndexRefValue = "refFirstDictionary";
            column_refFirstDictionary.ModelFieldTypeRefValue = ModelFieldType.Int;
            column_refFirstDictionary.ServerMappingRefValue = "Item.refFirstDictionary";
            column_refFirstDictionary.StoreId = "Store_refFirstDictionary";
            column_refFirstDictionary.ServerMapping = "Lookup.refFirstDictionary_Name";
            column_refFirstDictionary.IsForeignKey = true;
            column_refFirstDictionary.IsLookup = true;
            column_refFirstDictionary.IsFilterLookup = true;
            column_refFirstDictionary.FilterColumnMapping = isKZ ? "DIC_MyFirstDictionary_refFirstDictionary.Name" : "DIC_MyFirstDictionary_refFirstDictionary.Name";
            column_refFirstDictionary.TableTitle = SampleDictionaries.Properties.DIC_MyFirstDictionaryResources.Header;
            column_refFirstDictionary.SetEditorComboBox();
            column_refFirstDictionary.HasFilter = true;
            column_refFirstDictionary.CanEdit = true;
            column_refFirstDictionary.ControlID = "refFirstDictionary_{0}";
            columns.Add(column_refFirstDictionary);
            var column_DecimalValue =
                new GridColumn()
                         {
                             Header = DIC_MySecondDictionaryResources.DecimalValue__Header,
                             Sort = "DecimalValue",
                             Group = DIC_MySecondDictionaryResources.DecimalValue__GridGroup,
                             ColumnName = "DecimalValue",
                         };
            column_DecimalValue.Width = string.Empty;
            column_DecimalValue.ModelFieldType = ModelFieldType.Float;
            column_DecimalValue.DefaultHidden = false;
            column_DecimalValue.ServerMapping = "Item.DecimalValue";
            column_DecimalValue.DecimalPrecision = 2;
            column_DecimalValue.HasFilter = true;
            column_DecimalValue.CanEdit = true;
            column_DecimalValue.ControlID = "DecimalValue_{0}";
            columns.Add(column_DecimalValue);
            var column_BoolValue =
                new GridColumn()
                         {
                             Header = DIC_MySecondDictionaryResources.BoolValue__Header,
                             Sort = "BoolValue",
                             Group = DIC_MySecondDictionaryResources.BoolValue__GridGroup,
                             ColumnName = "BoolValue",
                         };
            column_BoolValue.Width = string.Empty;
            column_BoolValue.ModelFieldType = ModelFieldType.Boolean;
            column_BoolValue.DefaultHidden = false;
            column_BoolValue.ServerMapping = "Item.BoolValue";
            column_BoolValue.TrueText = DIC_MySecondDictionaryResources.BoolValue__TrueText;
            column_BoolValue.FalseText = DIC_MySecondDictionaryResources.BoolValue__FalseText;
            column_BoolValue.HasFilter = true;
            column_BoolValue.CanEdit = true;
            column_BoolValue.ControlID = "BoolValue_{0}";
            columns.Add(column_BoolValue);
            columns.Add(new GridColumn()
                            {
                                Header = TableResources.messages__Header,
                                ColumnName = "__messages",
                                Visible = false,
                                
                                CanEdit = false,
                            });
            InitColumns(columns);
        }
        
        
        partial void InitColumns(GridColumns gridColumns);
        
        protected void InitColumns(IEnumerable<GridColumn> columns)
        {
            _gridColumns = new GridColumns(columns);
            var baseGridColumns = (BaseGridColumns)_gridColumns;
            baseGridColumns.Page = Page;
            baseGridColumns.Control = this;
            _gridColumns.GenerateWithoutRow = false;
            if (ParentControlTableType == typeof(DIC_MyFirstDictionary) || NavigatorControl.Values.DIC_MyFirstDictionary != null)
                _gridColumns.refFirstDictionary.Visible = false;
        
            foreach (var logic in GetLogics())
                logic.InitColumns(_gridColumns);
            InitColumns(_gridColumns);
            grid.InitializeColumns(_gridColumns, gridFilter);
            source.View.InitializeStoreModelAdditional(store.Model[0]);
            
        }
        
        private void DeleteRow(long id, DIC_MySecondDictionaryEdit.RecordEvents recordEvents, bool loadRoot)
        {
            var item = source.GetRecord(id);
            if (item != null)
            {
                var args = new RecordEventArgs();
                recordEvents.RecordDeleting(args, id);
        
                if (args.Cancel)
                {
                    AddErrorMessage(args.GetFullErrorMessage());
                    return;
                }
        
                if (!AccessOptions.CheckPermitDelete()
                    || (item.Information != null && !item.Information.CanDelete))
                {
                    AddErrorMessage(Nat.Web.Controls.Properties.Resources.ENoPermitToDeleteRecord);
                    return;
                }
        
                if (!item.CanDelete)
                {
                    var messages = source.View.GetDeleteErrors(id, DIC_MySecondDictionaryResources.Header);
                    if (messages.All(string.IsNullOrEmpty))
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.ENoPermitToDeleteRecord);
                    else
                        AddErrorMessage(messages.Where(r => !string.IsNullOrEmpty(r)));
                    return;
                }
        
        
                BeforeDelete(item);
                var contextInfo = new DeleteRowContext<DIC_MySecondDictionary, DBDataContext, DIC_MySecondDictionaryJournalDataSourceView.Row, long>
                    {
                        Row = item,
                        Key = item.id,
                        TableItem = item.Item,
                        DB = source.View.DB,
                    };
                BeforeDelete(contextInfo);
                if (contextInfo.Cancel)
                {
                    AfterDelete(false, item);
                    AddErrorMessage(contextInfo.CancelMessage);
                    return;
                }
        
                try
                {
                    var delArgs = new DeleteEventArgs<long>();
                    contextInfo.DeleteEventArgs = delArgs;
                    if (contextInfo.SuccessfullRowDeleted != null && !contextInfo.SuccessfullRowDeleted.Value)
                    {
                        AfterDelete(false, item);
                        AddErrorMessage(contextInfo.FailedRowDeletedMessage);
                        return;
                    }
                    
                    if (!delArgs.IsDeleted)
                        DeleteRow(item, delArgs);
        
                    if (!delArgs.IsDeleted)
                    {
                        source.View.DB.DIC_MySecondDictionaries.DeleteOnSubmit(item.Item);
                        source.View.DB.SubmitChanges();
                    }
        
                    contextInfo.SuccessfullRowDeleted = true;
                    AfterDelete(true, item);          
                    if (delArgs.IsDeleted)
                    {
                        if (delArgs.NewSelectedValue != null)
                        {
                            ResetSelectedIndex(delArgs.NewSelectedValue.Value);
                        }
                        else
                            EmptySelectedIndex();
                    }
                }
                catch (SqlException exception)
                {
                    
                    contextInfo.SuccessfullRowDeleted = false;
                    AfterDelete(false, item);
                    if (exception.Number != 547)
                        AddErrorMessage(exception.ToString());
                    else
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.ECanNotDeleteUseInSystem);
                }
        
                store.Reload();
                OnSelectedIndexChanged(EventArgs.Empty);
            }
        }
        
        public static MainPageUrlBuilder FromUrl(string url)
        {
            var builder = MainPageUrlBuilder.FromUrlToOtherControl(url);
            builder.UserControl = "DIC_MySecondDictionaryJournal";
            return builder;
        }
        
        public static string GetUserControlName()
        {
            return "DIC_MySecondDictionaryJournal";
        }
        
        bool IAccessControl.CheckPermit(Page page)
        {
            return AccessOptions.CheckPermit();
        }
        
        private void InitializeSelectedValues()
        {
        }
        
        private void EmptySelectedIndex()
        {
        }
        
        private void ResetSelectedIndex(long id)
        {
        }
        
        private void GenerateHtmlAdditionalButtonsInternal()
        {
            var toolbar = grid.BottomBar.First();
            Action<AbstractComponent> addButton = commponent => toolbar.Items.Add(commponent);
            Action<AbstractComponent, AbstractComponent> insertAfterButton = (commponent, after) => toolbar.Items.Insert(toolbar.Items.IndexOf(after) + 1, commponent);
            var buttons = new AdditionalButtons(addButton, insertAfterButton);
            GenerateAdditionalButtons(buttons);
        }
        
        protected List<long> GetGridSelectedValues()
        {
            var sm = (RowSelectionModel)grid.GetSelectionModel();
            return sm.SelectedRows.Where(r => !string.IsNullOrEmpty(r.RecordID)).Select(r => Convert.ToInt64(r.RecordID)).ToList();
        }
        
        void IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
        {
            AdditionalButton_Click(eventArgument);
        }
        
        private void InitGetBrowseFilterParameters()
        {
            ExtNetBrowseFilterParameters param;
            param = new ExtNetBrowseFilterParameters();
            GetBrowseFilterParameters_refFirstDictionary(param, _gridColumns);
            HiddenrefFirstDictionaryBrowseFilterParams.Value = param.GetClientParameters();
        }
        
        private void InitSelectionMode()
        {
            topGridToolBar.Visible = Url.IsMultipleSelect;
            SelectionOK.Visible = Url.IsMultipleSelect;
            SelectionCancel.Visible = Url.IsMultipleSelect;
            selectedUserValues.Visible = Url.IsMultipleSelect;
        }
        
        protected string GetUpdateFilterSctiptFunctionName()
        {
            return "UpdateFilter_" + ClientID.Replace(".", "_");
        }
        
        protected string GetValueFilterSctiptFunctionName()
        {
            return "GetFilter_" + ClientID.Replace(".", "_");
        }
        
        #endregion
        
        #region Direct Methods
        
        [DirectMethod]
        public void DeleteRow(string strKey)
        {
            long id = Convert.ToInt64(strKey);
            var recordEvents = new DIC_MySecondDictionaryEdit.RecordEvents { Page = Page, Control = this, };
            recordEvents.InitializeValues(NavigatorControl.Values);
        
            DeleteRow(id, recordEvents, false);
        }
        
        
        
        [DirectMethod]
        public long GetPageNumber(string strKey, DataSorter[] sorts, int pageSize)
        {
            long id = Convert.ToInt64(strKey);
            var sort = BaseDataSourceViewExtender.GetSortExpression(_gridColumns, sorts);
            if (string.IsNullOrEmpty(sort))
                sort = "Name,id";
            var where = "id=" + id;
        
            var rowIndex = GetRowIndex(source.View.GetSelect(null, null, LocalizationHelper.IsCultureKZ, true), source.View.DB, sort, @where);
            if (rowIndex == null)
                return 0;
        
            return (rowIndex.Value / pageSize) + 1;
        }
        
        #endregion
        
        #region Overrides
        
        protected override IWorkFlow[] CreateWorkFlows()
        {
            return new IWorkFlow[] {};
        }
        
        public override Expression GetExpression(string reference, Expression param)
        {
            if (_selectedIndexChanged) store.Reload();
            if (SelectedValueOrParentValue == null) return Expression.Constant(false);
            foreach (var property in reference.Split('.'))
                if (!property.Equals("id", StringComparison.OrdinalIgnoreCase))
                    param = Expression.Property(param, property);
            return Expression.Equal(Expression.Property(param, "id"), Expression.Constant(SelectedValueOrParentValue, typeof(long)));
        }
        
        public override Expression GetExpression(string reference, Expression param, QueryParameters qParams)
        {
            if (qParams == null) return GetExpression(reference, param);
            if (_selectedIndexChanged) store.Reload();
            if (SelectedValueOrParentValue == null) return qParams.GetExpression("Empty", false);
            foreach (var property in reference.Split('.'))
                if (!property.Equals("id", StringComparison.OrdinalIgnoreCase))
                    param = Expression.Property(param, property);
            return Expression.Equal(Expression.Property(param, "id"), qParams.GetExpression(reference, (long)SelectedValueOrParentValue));
        }
        
        protected override void OnLoad(EventArgs e)
        {
            GetFilterControl(DB);//Initialize
            this.Page.LoadComplete += new EventHandler(Page_LoadComplete);
            if (!IsPostBack && Url.QueryParameters.ContainsKey(DIC_MySecondDictionaryFilter.ConstOfColumnNames.RefTable))
                SelectIDHidden.Value = Url.QueryParameters[DIC_MySecondDictionaryFilter.ConstOfColumnNames.RefTable];
        
            var filter = (DIC_MySecondDictionaryFilter)FilterControlInternal ?? internalfilterControl;
            if (filter != null)
            {
                GridFilterHidden.Text = GridFiltersExtender.GetFilterValuesFromRequest(gridFilter.ParamPrefix, GridFilterHidden.Text);
                filter.InitializeFilterFunction(GetUpdateFilterSctiptFunctionName(), GetValueFilterSctiptFunctionName());
                gridFilter.SetGridFilters<long, DIC_MySecondDictionary, DBDataContext, DIC_MySecondDictionaryJournalDataSourceView.Row>(GridFilterHidden.Text, filter, _gridColumns);
            }
        
            
        
            OnLoad();
            base.OnLoad(e);
        }
        
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            OnInit();
            InitColumnsInternal();
            inited = true;
        
            grid.InitializeSelectMode(Url, StoreLoadHandler);
            GenerateHtmlAdditionalButtonsInternal();
        }
        
        protected override void OnPreRender(EventArgs e)
        {
            var visibleAddLink = AccessOptions.CheckPermitAdd();
            if (NavigatorControl != null)
                visibleAddLink = visibleAddLink && source.View.AllowAddRowForTableTypes(NavigatorControl.Values, DIC_MySecondDictionaryResources.Header).Where(r => string.IsNullOrEmpty(r)).Count() == 0;
            if (visibleAddLink)
                SetVisibleAddLink(ref visibleAddLink);
        
            AddButton.Visible = visibleAddLink;
            DeleteSelectedButton.Visible = AccessOptions.CheckPermitDelete();
            if (visibleAddLink)
            {
                var addUrl = Url.Clone("DIC_MySecondDictionaryEdit", true, string.Empty, false).CreateUrl();
                GetAddUrl(ref addUrl);
                AddButton.Listeners.Click.Handler = GridButtonsColumn.AddButtonHandler(addUrl);
            }
        
            SaveButton.Visible = AccessOptions.CheckPermitEdit();
            InitGetBrowseFilterParameters();
            InitSelectionMode();
        
            OnPreRender();
            base.OnPreRender(e);
        }
        
        #endregion
        
        #region Events
        
        public event EventHandler CurrentEditing;
        public event EventHandler NewRecordAdding;
        
        protected virtual void OnCurrentEditing(EventArgs args)
        {
            if (CurrentEditing != null) CurrentEditing(this, args);
        }
        
        protected virtual void OnNewRecordAdding(EventArgs args)
        {
            if (NewRecordAdding != null) NewRecordAdding(this, args);
        }
        
        protected void FilterControl_OnFilterApply(object sender, EventArgs e)
        {
            isFilterSeted = false;
            EmptySelectedIndex();
            ((DIC_MySecondDictionaryFilter)FilterControlInternal).SelectedValues = SelectedValues;
            store.Reload();
            OnSelectedIndexChanged(EventArgs.Empty);
        }
        
        private void ParentControl_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            isFilterSeted = false;
            if (!Url.QueryParameters.ContainsKey("refDIC_MySecondDictionary") || string.IsNullOrEmpty(Url.QueryParameters["refDIC_MySecondDictionary"]))
                EmptySelectedIndex();
            else
            {
                var value = Url.QueryParameters["refDIC_MySecondDictionary"];
                ResetSelectedIndex(Convert.ToInt64(value));
            }
            store.Reload();
        }
        
        protected void Source_Selecting(object sender, DataSourceSelectingEventArgs e)
        {
            e.FilterControl = GetFilterControl((DBDataContext)e.DB);
        }
        
        protected void NavigatorControl_ValuesInitialized(object sender, EventArgs e)
        {
            if (HasParentControl && ParentControlTableType != null)
            {
                if (ParentControlInternal.SelectedValue != null)
                {
                    NavigatorControl.Values[ParentControlTableType] = ParentControlInternal.SelectedValue;
                    //Url.QueryParameters[FilterByParentControl] = ParentControlInternal.SelectedValue.ToString();
                }
            }
            NavigatorControl.Url = Url;
        }
        
        partial void OnReadData(StoreReadDataEventArgs e, ref bool cancel);
        
        protected void OnReadData(object sender, StoreReadDataEventArgs e)
        {
            bool cancel = false;
            OnReadData(e, ref cancel);
            if (cancel) return;
            if (string.IsNullOrEmpty(DataSessionKey))
                grid.ReadData(source.View, e, (DIC_MySecondDictionaryFilter)this.GetFilterControl(DB), gridFilter, _gridColumns);
            else
            {
                if (!string.IsNullOrEmpty(store.DataSourceID))
                    store.DataSourceID = null;
                store.DataSource = Session[DataSessionKey];
            }
        }
        
        private void Page_LoadComplete(object sender, EventArgs e)
        {
        }
        
        protected void DeleteSelected(object sender, DirectEventArgs e)
        {
            var sm = (RowSelectionModel)grid.GetSelectionModel();
            foreach (var item in sm.SelectedRows.Where(r => string.IsNullOrEmpty(r.RecordID)).Reverse())
                store.RemoveAt(item.RowIndex);
        
            foreach (var id in GetGridSelectedValues())
            {
                var recordEvents = new DIC_MySecondDictionaryEdit.RecordEvents { Page = Page, Control = this, };
                recordEvents.InitializeValues(NavigatorControl.Values);
        
                DeleteRow(id, recordEvents, true);
            }
        }
        
        protected void BeforeStroreChanged(object sender, BeforeStoreChangedEventArgs e)
        {
            var json = e.DataHandler.JsonData;
            var dataHandler = new StoreDataHandler(json);
            var data = dataHandler.ObjectData<DIC_MySecondDictionary>();
            var edit = (DIC_MySecondDictionaryEdit)BaseMainPage.LoadControl(Page, "DIC_MySecondDictionaryEdit");
            var reloadData = false;
            bool isValid = true;
        
            e.Cancel = true;
        
            BeforeSaveValidate(data, ref isValid);
            if (!isValid)
            {
                foreach (var row in data)
                    X.AddScript($"setTimeout(function(){{ #{{store}}.getById({row.id}).setDirty(); }}, 100);");
                X.AddScript("#{grid}.view.loadMask.hide();");
                return;
            }
        
            foreach (var row in data)
            {
                switch (e.Action) 
                {
                    case StoreAction.Update:
                        // todo: подумать о том как показать ошибки
                        reloadData |= edit.EditRowFromGrid(row);
                        break;
                    case StoreAction.Create:
                        // todo: подумать о том как показать ошибки
                        edit.InsertRowFromGrid(row);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
        
            var result = source.View.GetSelect()
                               .Where(r => data.Contains(r.Item))
                               .Select(source.View.GetFullModelDataExpression);
        
            if (reloadData)
                store.Reload();
            else
                e.ResponseRecords.AddRange(result);
        
            X.AddScript("#{grid}.view.loadMask.hide();");
            AfterSave(data.Select(r => r.id));
        }
        
        protected void jdsrefFirstDictionary_Selecting(object sender, DataSourceSelectingEventArgs e)
        {
            var parameters = new BrowseFilterParameters();
            GetBrowseFilterParameters_refFirstDictionary(parameters, _gridColumns);
            
            // todo: реализовать передачу SelectParameters
            // jdsrefFirstDictionary.BaseView.SelectParameters = Get_refFirstDictionarySelectParameters();
            var control = 
                jdsrefFirstDictionary.BaseView.CreateDefaultFilter(
                    "SampleDictionaries.UserControls.DIC_MyFirstDictionaryFilter",
                    "DIC_MyFirstDictionary",
                    "none",
                    null,
                    parameters,
                    e.DB);
            e.FilterControl = control;
        }
        
        #endregion
        
        #region Partials
        
        partial void GetParentControl(ref ISelectedValue control);
        partial void GenerateAdditionalButtons(AdditionalButtons buttons);
        partial void SetVisibleAddLink(ref bool visible);
        partial void InitializeFilterControl(IFilterControl filterControl);
        partial void OnPreRender();
        partial void OnLoad();
        partial void Render();
        partial void BeforeDelete(DIC_MySecondDictionaryJournalDataSourceView.Row row);
        partial void BeforeDelete(DeleteRowContext<DIC_MySecondDictionary, DBDataContext, DIC_MySecondDictionaryJournalDataSourceView.Row, long> context);
        partial void DeleteRow(DIC_MySecondDictionaryJournalDataSourceView.Row item, DeleteEventArgs<long> delArgs);
        partial void AfterDelete(bool isDeleted, DIC_MySecondDictionaryJournalDataSourceView.Row row);
        partial void ChangeLogTypeDelete(ref LogMessageType logType);
        partial void ChangeLogTypeLookJournal(ref LogMessageType logType);
        partial void ChangeLogTypeDelete(ref long logType);
        partial void ChangeLogTypeLookJournal(ref long logType);
        partial void ChangeLogContent(ref string content, DIC_MySecondDictionaryJournalDataSourceView.Row deleteRow);
        partial void ChangeLogContentDelete(ref string content, DIC_MySecondDictionaryJournalDataSourceView.Row deleteRow);
        partial void ChangeLogContentLookJournal(ref string content);
        
        partial void OnInit();
        partial void GetAddUrl(ref string url);
        partial void AdditionalButton_Click(string argument);
        partial void AfterSave(IEnumerable<long> keys);
        partial void BeforeSaveValidate(List<DIC_MySecondDictionary> modifiedAgreementers, ref bool isValid);
        partial void GetBrowseFilterParameters_refFirstDictionary(BrowseFilterParameters parameters, GridColumns gridColumns);
        
        #endregion
        
        #region Inner Classes
        
        public class GridColumns : BaseGridColumns
        {
            public GridColumns(IEnumerable<GridColumn> columns) : base(columns)
            {
            }
        
            public GridColumn __messages
            {
                get { return (GridColumn)this["__messages"]; }
            }
        
            public GridButtonsColumn __buttons
            {
                get { return (GridButtonsColumn)this["__buttons"]; }
            }
        
            public GridColumn __icons
            {
                get { return (GridColumn)this["__icons"]; }
            }
        
            /// <summary>
            /// Колонка "Name".
            /// </summary>
            public GridColumn Name
            {
                get { return (GridColumn)this["Name"]; }
            }
        
            /// <summary>
            /// Индекс колонки "Name".
            /// </summary>
            public int IndexOfName()
            {
                return Columns.IndexOf(this["Name"]);
            }
        
            /// <summary>
            /// Колонка "First Dictionary Value".
            /// </summary>
            public GridColumn refFirstDictionary
            {
                get { return (GridColumn)this["refFirstDictionary"]; }
            }
        
            /// <summary>
            /// Индекс колонки "First Dictionary Value".
            /// </summary>
            public int IndexOfrefFirstDictionary()
            {
                return Columns.IndexOf(this["refFirstDictionary"]);
            }
        
            /// <summary>
            /// Колонка "Decimal Value".
            /// </summary>
            public GridColumn DecimalValue
            {
                get { return (GridColumn)this["DecimalValue"]; }
            }
        
            /// <summary>
            /// Индекс колонки "Decimal Value".
            /// </summary>
            public int IndexOfDecimalValue()
            {
                return Columns.IndexOf(this["DecimalValue"]);
            }
        
            /// <summary>
            /// Колонка "Boolean Value".
            /// </summary>
            public GridColumn BoolValue
            {
                get { return (GridColumn)this["BoolValue"]; }
            }
        
            /// <summary>
            /// Индекс колонки "Boolean Value".
            /// </summary>
            public int IndexOfBoolValue()
            {
                return Columns.IndexOf(this["BoolValue"]);
            }
        }
        
        #endregion
    }
}
#pragma warning restore
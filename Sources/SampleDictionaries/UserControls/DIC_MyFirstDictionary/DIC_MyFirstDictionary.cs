/*
 * Generated by: Sergey.Shpakovskiy
 * Generated at: 1.0.0.3
 * Copyright © JSC NAT Kazakhstan 2011
 */
#pragma warning disable
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Security.Principal;
using System.Text;
using System.Web;
using System.Web.Caching;
using System.Web.Compilation;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using JS.LinqToJavaScript;

using Nat.Tools.Specific;
using Nat.Web.Controls;
using Nat.Web.Controls.GenerationClasses;
using Nat.Web.Controls.GenerationClasses.Data;
using Nat.Web.Controls.GenerationClasses.Filter;
using Nat.Web.Controls.GenerationClasses.Navigator;
using Nat.Web.Controls.HistoryFilters;
using Nat.Web.Controls.Preview;
using Nat.Web.Tools;
using Nat.Web.Tools.Security;
using Nat.Web.Tools.WorkFlow;
using SampleDictionaries.UserControls;
using SampleDictionaries.Properties;
using SampleDictionaries.Security;
using AccessOptions = SampleDictionaries.DIC_MyFirstDictionaryAccessOptions;


using Nat.Web.Tools.ExtNet.Data;
using Nat.Web.Tools.ExtNet.Extenders;
using Nat.Web.Tools.ExtNet.ExtNetConfig;

namespace SampleDictionaries
{
    #region DIC_MyFirstDictionaryJournalDataSourceView

    public partial class DIC_MyFirstDictionaryJournalDataSourceView : BaseDataSourceView<long, DIC_MyFirstDictionary, DBDataContext, DIC_MyFirstDictionaryJournalDataSourceView.Row>, IDataSourceView2, IDataSourceView3, IHeaderControl, IDataSourceViewExtNet
    {
        private readonly BaseDataSource<long> owner;
        private SelectModeDIC_MyFirstDictionary? _select;
        private DIC_MyFirstDictionaryFilter _filterSelect;
        private bool? _showHistory;
        private IEnumerable<Row> _cache;
        private MainPageUrlBuilder _url;

        public DIC_MyFirstDictionaryJournalDataSourceView(BaseDataSource<long> owner, string viewName)
            : base(owner, viewName)
        {
            this.owner = owner;
            this.Lookup = new LookupExpressions { GetUrl = () => _url };
        }

        public DIC_MyFirstDictionaryJournalDataSourceView()
            : base(new DIC_MyFirstDictionaryJournalDataSource(), string.Empty)
        {
            this.Lookup = new LookupExpressions { GetUrl = () => _url };
        }
                
        public override bool LookupValuesHidden
        {
            set 
            {
                base.LookupValuesHidden = value;
                Lookup.DefaultHidden = value;
            }
        }
        
        public LookupExpressions Lookup { get; private set; }

        public SelectModeDIC_MyFirstDictionary SelectMode
        {
            get 
            {
                try
                {
                    if (_url != null)
                        _select = (SelectModeDIC_MyFirstDictionary?)Enum.Parse(typeof(SelectModeDIC_MyFirstDictionary), _url.SelectMode, true);
                    if (owner == null && _select == null) _select = SelectModeDIC_MyFirstDictionary.none;
                    if (_select == null) _select = (SelectModeDIC_MyFirstDictionary?)Enum.Parse(typeof(SelectModeDIC_MyFirstDictionary), MainPageUrlBuilder.GetSelectMode(owner.Page), true);
                }
                catch
                {
                    _select = SelectModeDIC_MyFirstDictionary.none;
                }
                
                return _select.Value;
            }
            
            set
            {
                _select = value;
            }
        }

        public override string TableName
        {
            get { return "DIC_MyFirstDictionary"; }
        }

        public override bool CanSort
        {
            get { return true; }
        }

        public override bool CanPage
        {
            get { return true; }
        }

        public override bool CanRetrieveTotalRowCount
        {
            get { return true; }
        }

        public string Header
        {
            get { return DIC_MyFirstDictionaryResources.Header; }
        }

        public string HeaderRu
        {
            get { return DIC_MyFirstDictionaryResources.ResourceManager.GetString("Header", new CultureInfo("ru-ru")); }
        }

        public string HeaderKz
        {
            get { return DIC_MyFirstDictionaryResources.ResourceManager.GetString("Header", new CultureInfo("kk-kz")); }
        }

        partial void InitDefaultSort(ref string sortValue);
        
        protected override string DefaultSort
        {
            get
            {
                var sortValue = "Name,id";
                InitDefaultSort(ref sortValue);
                return sortValue;
            }
        }

        protected override string RequiredSort
        {
            get { return "id"; }
        }
        
        public override bool SupportGlobalCache { get { return false; } }

        public override bool SupportSelectICodeRow
        {
            get { return false; }
        }

        [Conditional("DEBUG")]
        private void WriteTrace(string value)
        {
            if (owner != null && owner.Page != null)
                owner.Page.Trace.Write(value);
        }

        protected override DBDataContext CreateDataContext()
        {
            var db = InitConnection == null ? new DBDataContext(SpecificInstances.DbFactory.CreateConnection()) : new DBDataContext(InitConnection);
            return db;
        }

        protected override IWorkFlow[] CreateWorkFlows()
        {
            return new IWorkFlow[] {};
        }

        private IEnumerable<Row> EnsureExistRow(IQueryable<Row> rows)
        {
            if (!AllowCreateSelectedRow || _selectedID == null) return rows;
            var list = rows.ToList();
            foreach (var item in list)
                if (item.id == _selectedID.Value)
                    return list;
            list.Add(new Row
            {
                id = _selectedID.Value,
                Value = _selectedID.Value.ToString(),
                nameRu = Nat.Web.Controls.Properties.Resources.SNotExistRow,
                nameKz = Nat.Web.Controls.Properties.Resources.SNotExistRow,
            });
            return list;
        }

        public override string GetStringID(DIC_MyFirstDictionary row)
        {
            return GetID(row).ToString();
        }

        public override long? GetID(DIC_MyFirstDictionary row)
        {
            return row.id;
        }

        public override long? GetIDByRefParent(DIC_MyFirstDictionary row)
        {
            return null;
        }

        protected override bool UseTreeFilter { get { return false; } }

        public IQueryable<Row> GetSelect(long id)
        {
            return GetSelect(id, string.Empty);
        }

        public IQueryable<Row> GetSelect(long id, bool isKz)
        {
            return GetSelect(id, string.Empty, isKz);
        }

        public IQueryable<Row> GetSelect(long id, string selectColumnName)
        {
            return GetSelect(selectColumnName).Where(p => p.Item.id == id);
        }

        public IQueryable<Row> GetSelect(long id, string selectColumnName, bool isKz)
        {
            return GetSelect(selectColumnName, isKz).Where(p => p.Item.id == id);
        }

        public IQueryable<Row> GetSelect(long id, string selectColumnName, bool isKz, bool isTreeFilter)
        {
            return GetSelect(null, selectColumnName, isKz, isTreeFilter).Where(p => p.Item.id == id);
        }

        public override IQueryable<IRow> GetSelectIRow(long id)
        {
            return GetSelect(id).Cast<IRow>();
        }

        public override IQueryable<ICodeRow> GetSelectICodeRow(long id)
        {
            throw new NotImplementedException();
        }

        public override IQueryable<IRow> GetSelectIRow()
        {
            return GetSelect().Cast<IRow>();
        }

        public override IQueryable<ICodeRow> GetSelectICodeRow()
        {
            throw new NotImplementedException();
        }

        public IQueryable<Row> GetSelectWithoutFilters(long id)
        {
            return GetSelectWithoutFilters(id, string.Empty);
        }

        public IQueryable<Row> GetSelectWithoutFilters(long id, string selectColumnName)
        {
            return GetSelectWithoutFilters(selectColumnName).Where(p => p.Item.id == id);
        }

        public override Expression<Func<DIC_MyFirstDictionary, long, bool>> GetWhereByKey()
        {
            return (p, id) => p.id == id;
        }

        public override object GetKey(string key)
        {
            return Convert.ToInt64(key);
        }

        public override string GetName(long id, string selectColumnName, bool isKz)
        {
            if (isKz)
                return GetSelectWithoutFilters(id, selectColumnName).Select(p => p.nameKz).FirstOrDefault();
            return GetSelectWithoutFilters(id, selectColumnName).Select(p => p.nameRu).FirstOrDefault();
        }

        public override IQueryable<BaseRow> GetSelectRow(long value, string selectColumnName)
        {
            return GetSelect(value, selectColumnName).Cast<BaseRow>();
        }

        public override IQueryable<IRow> GetSelectIRow(string queryParameters)
        {
            DB.ObjectTrackingEnabled = false;
            DB.DeferredLoadingEnabled = false;
            _filterSelect = new DIC_MyFirstDictionaryFilter();
            var urlBuilder = new MainPageUrlBuilder("/MainPage.aspx/data/DIC_MyFirstDictionaryJournal/Select?" + queryParameters);
            _filterSelect.SetUrl(urlBuilder);
            _filterSelect.SetDB(DB);
            _url = urlBuilder;
            SelectForAddType = urlBuilder.SelectForAddType;
            SelectParameters = urlBuilder.SelectParameters;
            AddSearchInFilter(urlBuilder, _filterSelect);
            if (!string.IsNullOrEmpty(urlBuilder.SelectNameColumn))
                return GetSelect(urlBuilder.SelectNameColumn).Cast<IRow>().Select(r => r);
            return GetSelect().Cast<IRow>().Select(r => r);
        }

        IQueryable<IDataRow> IDataSourceView2.GetSelectIRow(string queryParameters)
        {
            DB.ObjectTrackingEnabled = false;
            DB.DeferredLoadingEnabled = false;
            _filterSelect = new DIC_MyFirstDictionaryFilter();
            var urlBuilder = new MainPageUrlBuilder("/MainPage.aspx/data/DIC_MyFirstDictionaryJournal/Select?" + queryParameters);
            _filterSelect.SetUrl(urlBuilder);
            _filterSelect.SetDB(DB);
            _url = urlBuilder;
            SelectForAddType = urlBuilder.SelectForAddType;
            SelectParameters = urlBuilder.SelectParameters;
            AddSearchInFilter(urlBuilder, _filterSelect);
            if (!string.IsNullOrEmpty(urlBuilder.SelectNameColumn))
                return GetSelect(urlBuilder.SelectNameColumn).Cast<IDataRow>().Select(r => r);
            return GetSelect().Cast<IDataRow>().Select(r => r);
        }

        IQueryable<IDataRow> IDataSourceViewExtNet.GetFullModelData(string queryParameters)
        {
            DB.ObjectTrackingEnabled = false;
            DB.DeferredLoadingEnabled = false;
            _filterSelect = new DIC_MyFirstDictionaryFilter();
            var url = "/MainPage.aspx/data/DIC_MyFirstDictionaryJournal/Select"
                      + (!string.IsNullOrEmpty(queryParameters) && queryParameters[0] == '/'
                          ? queryParameters
                          : "?" + queryParameters);
            var urlBuilder = new MainPageUrlBuilder(url);
            _filterSelect.SetUrl(urlBuilder);
            _filterSelect.SetDB(DB);
            _filterSelect.ShowHistory = urlBuilder.ShowHistory;
            _url = urlBuilder;
            AddSearchInFilter(urlBuilder, _filterSelect);
            SelectForAddType = urlBuilder.SelectForAddType;
            SelectParameters = urlBuilder.SelectParameters;
            IQueryable<Row> data;
            if (!string.IsNullOrEmpty(urlBuilder.SelectNameColumn))
                data = GetSelect(urlBuilder.SelectNameColumn);
            else
                data = GetSelect();

            return data.Select(GetFullModelDataExpression).Cast<IDataRow>();
        }

        IQueryable<IDataRow> IDataSourceViewExtNet.GetFullModelData(string queryParameters, string refParent)
        {
            throw new NotSupportedException();
        }

        public Expression<Func<Row, IDataRow>> GetFullModelDataExpression
        {
            get
            {
                return row => new ModelData
                    {
                        CanEdit = row.CanEdit,
                        CanDelete = row.CanDelete,
                        id = row.Item.id,
                        Code = row.Item.Code,
                        Name = row.Item.Name,
                        DateStart = row.Item.DateStart,
                        DateEnd = row.Item.DateEnd,
                        RowVersion = row.Item.RowVersion,
                        nameRu = row.nameRu,
                        nameKz = row.nameKz,
                    };
            }
        }

        public override IQueryable<ICodeRow> GetSelectICodeRow(string queryParameters)
        {
            throw new NotImplementedException();
        }

        IQueryable<IDataCodeRow> IDataSourceView2.GetSelectICodeRow(string queryParameters)
        {
            throw new NotImplementedException();
        }

        public override BaseInformationValues Validate(long value, CancelEventArgs args)
        {
            var row = GetCacheSelect(value);
            if (row == null)
            {
                args.Cancel = true;
                return null;
            }
            if (row.Information != null)
                row.Information.Validate();
            return row.Information;
        }

        public override Row[] ValidateAll(long[] values, CancelEventArgs args)
        {
            var rememberShowHistory = _showHistory;
            var recArgs = args as RecordValidateArgs;
            if (recArgs != null && recArgs.IgnoreHistoryFilter)
                _showHistory = true;
            var rows = GetSelect().Where(r => values.Contains(r.id)).ToArray();
            _showHistory = rememberShowHistory;

            if (rows.Length == 0)
            {
                args.Cancel = true;
                return new Row[0];
            }
            foreach (var row in rows.Where(row => row.Information != null))
                row.Information.Validate();
            return rows;
        }

        public override BaseInformationValues Validate(long value, RecordValidateArgs args)
        {
            var rememberShowHistory = _showHistory;
            if (args.IgnoreHistoryFilter)
                _showHistory = true;
            var row = GetCacheSelect(value);
            _showHistory = rememberShowHistory;
            if (row == null || (!row.CanAddChild && args.SelectForAddChild))
            {
                args.Cancel = true;
                return null;
            }
            if (row.Information != null)
                row.Information.Validate();
            return row.Information;
        }

        public override bool CheckPermit()
        {
            return AccessOptions.CheckPermit();
        }

        public override BaseFilterControl<long> CreateDefaultFilter(MainPageUrlBuilder urlBuilder)
        {
            var control = new DIC_MyFirstDictionaryFilter();
            urlBuilder.UserControl = DIC_MyFirstDictionaryFilter.ConstOfColumnNames.JournalName;
            return control;
        }

        protected override Expression GetFilteredExpression(Expression query, QueryParameters qParams, out BaseFilterControl<long, DIC_MyFirstDictionary, DBDataContext> outFilterControl)
        {
            DIC_MyFirstDictionaryFilter filterControl = _filterSelect;
            if (_filterSelect == null)
            {
                var args = new DataSourceSelectingEventArgs { DB = DB };
                if (owner != null) owner.OnSelecting(args);
                filterControl = (DIC_MyFirstDictionaryFilter)args.FilterControl;
            }
            if(filterControl == null)
            {
                var fc = new DIC_MyFirstDictionaryFilter();
                filterControl = fc;
                fc.SetUrl(new MainPageUrlBuilder { SelectMode = "none", UserControl = DIC_MyFirstDictionaryFilter.ConstOfColumnNames.JournalName, });
                fc.SetDB(DB);
            }
            if (_showHistory == null)
                _showHistory = filterControl.ShowHistory;
            else
                filterControl.ShowHistory = _showHistory.Value;
            _selectedID = filterControl.SelectedID;
            _url = filterControl.Url;
            outFilterControl = filterControl;
            return filterControl.GetFilteredExpression(query, qParams);
        }

        protected IQueryable<DIC_MyFirstDictionary> SetFilter(IQueryable<DIC_MyFirstDictionary> queryable)
        {
            DIC_MyFirstDictionaryFilter filterControl = _filterSelect;
            if (_filterSelect == null)
            {
                var args = new DataSourceSelectingEventArgs { DB = DB };
                owner.OnSelecting(args);
                filterControl = (DIC_MyFirstDictionaryFilter)args.FilterControl;
            }
            if (filterControl == null)
            {
                var fc = new DIC_MyFirstDictionaryFilter();
                filterControl = fc;
                fc.SetUrl(new MainPageUrlBuilder { SelectMode = "none", UserControl = DIC_MyFirstDictionaryFilter.ConstOfColumnNames.JournalName });
                fc.SetDB(DB);
                if (!string.IsNullOrEmpty(SelectedRowKey))
                    filterControl.SelectedID = Convert.ToInt64(SelectedRowKey);
            }
            if (_showHistory == null)
                _showHistory = filterControl.ShowHistory;
            else
                filterControl.ShowHistory = _showHistory.Value;
            _selectedID = filterControl.SelectedID;
            _url = filterControl.Url;
            return (IQueryable<DIC_MyFirstDictionary>)filterControl.SetFilters(queryable);
        }

        public partial class TotalInfo
        {
        }

        partial void GetTotalInfo(DataSourceSelectArguments arguments, ref IEnumerable<TotalInfo> result);

        public IEnumerable<TotalInfo> GetTotalInfo(DataSourceSelectArguments arguments)
        {
            IEnumerable<TotalInfo> result = null;
            GetTotalInfo(arguments, ref result);
            return result;
        }

        partial void ChangeSelect(ref Expression<Func<DIC_MyFirstDictionary, LookupValues, InformationValues>> informationExpression);
        partial void ChangeSelectDB(ref Expression<Func<DBDataContext, DIC_MyFirstDictionary, LookupValues, InformationValues>> informationExpression);
        
        private static ConstructorInfo rowCtr = typeof(Row).GetConstructor(new [] { typeof(DIC_MyFirstDictionary), typeof(LookupValues), typeof(InformationValues), typeof(string), typeof(string), typeof(bool), typeof(bool), typeof(bool), typeof(Int64) });
        private static ConstructorInfo lookupCtr = typeof(LookupValues).GetConstructor(new[] { typeof(object[]) });
        
        private IQueryable<Row> ChangeSelect(IQueryable<DIC_MyFirstDictionary> query, string selectColumnName)
        {
            var isKz = System.Globalization.CultureInfo.CurrentUICulture.Name.Equals("kk-kz", StringComparison.OrdinalIgnoreCase);
            return ChangeSelect(query, selectColumnName, isKz);
        }
        
        private IQueryable<Row> ChangeSelect(IQueryable<DIC_MyFirstDictionary> query, string selectColumnName, bool isKz)
        {
            Expression exp = GetSelectedRowExpression(query.Expression, selectColumnName, isKz, null);
            return query.Provider.CreateQuery<Row>(exp);
        }
        
        protected override Expression GetSelectedRowExpression(Expression query, string selectColumnName, bool isKz, QueryParameters qParams)
        {
            WriteTrace("DIC_MyFirstDictionaryJournalDataSourceView.ChangeSelect.Begin");
            if (qParams != null)
                qParams.SelectColumnName = selectColumnName;
            var showHistory = _showHistory == null || _showHistory.Value;
            var time = DateTime.Now;
            IQueryable<Row> result;
        
            var param = Expression.Parameter(typeof(DIC_MyFirstDictionary), "c");
            Lookup.IsKz = isKz;
            Lookup.DB = DB;
            Lookup.ShowHistory = showHistory;
            Lookup.QueryParameters = qParams;
            if (qParams != null)
            {
                qParams.AddUniqueParameter("IsKz=" + isKz);
                qParams.AddUniqueParameter("ShowHistory=" + showHistory);
            }
            var selectedAdditionalValuesExp = GetSelectedAdditionalValuesExpression(DB, param);
            Expression lookupExp = Expression.New(lookupCtr, 
                new Expression[] {  selectedAdditionalValuesExp }, 
                new MemberInfo[] { typeof(LookupValues).GetMember("SelectedAdditionalValues")[0]});
            Expression lookupPred = Expression.Lambda(lookupExp, param);
            Expression<Func<DIC_MyFirstDictionary, LookupValues, InformationValues>> informationExpression = null;
            Expression<Func<DBDataContext, DIC_MyFirstDictionary, LookupValues, InformationValues>> informationExpressionDB = null;
            ChangeSelect(ref informationExpression);
            ChangeSelectDB(ref informationExpressionDB);
            Expression informationExp;
            Type selectType = typeof(DIC_MyFirstDictionary);
        
            if (informationExpressionDB != null)
                informationExp = Expression.Invoke(informationExpressionDB, qParams.GetDBExpression(DB), param, lookupExp);
            else if (informationExpression != null)
                informationExp = Expression.Invoke(informationExpression, param, lookupExp);
            else
                informationExp = Expression.Constant(null, typeof(InformationValues)); 
        
            Expression<Func<DIC_MyFirstDictionary, string>> nameRuExp;
            Expression<Func<DIC_MyFirstDictionary, string>> nameKzExp;
            GetNameExpressions(selectColumnName, out nameRuExp, out nameKzExp);
            Expression<Func<DIC_MyFirstDictionary, Int64>> idKeyExp = p => p.id;
            Expression expItem = param;
        
            Expression canEditExp;
            Expression canDeleteExp;
            GetEditAndDeleteExpressions(expItem, informationExp, out canEditExp, out canDeleteExp);
            
            Expression canAddChildExp = null;
            Type selectForAddType = string.IsNullOrEmpty(SelectForAddType) ? null : BuildManager.GetType(SelectForAddType, true, true);
            if (selectForAddType != null)
                canAddChildExp = GetAddChildExpression(null, selectForAddType, expItem, param, new Expression[0]);
            if (canAddChildExp == null)
                canAddChildExp = Expression.Constant(true);
            
            var rowExp = Expression.New(rowCtr, 
                new Expression[] { expItem, lookupExp, informationExp, Expression.Invoke(nameRuExp, expItem), Expression.Invoke(nameKzExp, expItem), canEditExp, canDeleteExp, canAddChildExp, Expression.Invoke(idKeyExp, expItem) },
                new MemberInfo[] { typeof(Row).GetMember("Item")[0], typeof(Row).GetMember("Lookup")[0], typeof(Row).GetMember("Information")[0], typeof(Row).GetMember("nameRu")[0], typeof(Row).GetMember("nameKz")[0], typeof(Row).GetMember("CanEdit")[0], typeof(Row).GetMember("CanDelete")[0], typeof(Row).GetMember("CanAddChild")[0], typeof(Row).GetMember("id")[0] });
            Expression pred = Expression.Lambda(rowExp, param);
            Expression expr = Expression.Call(typeof(Queryable), "Select", new[] { selectType, typeof(Row) }, query, pred);
            WriteTrace("DIC_MyFirstDictionaryJournalDataSourceView.ChangeSelect.End");
            return expr;
        }
        
        partial void GetNameExpressionPartial(string selectColumnName, ref Expression<Func<DIC_MyFirstDictionary, string>> nameRuExp, ref Expression<Func<DIC_MyFirstDictionary, string>> nameKzExp);
        
        private void GetNameExpressions(string selectColumnName, out Expression<Func<DIC_MyFirstDictionary, string>> nameRuExp, out Expression<Func<DIC_MyFirstDictionary, string>> nameKzExp)
        {
            nameRuExp = nameKzExp = null;
            GetNameExpressionPartial(selectColumnName, ref nameRuExp, ref nameKzExp);
            if (nameRuExp != null && nameKzExp != null)
                return;
        
            if (string.IsNullOrEmpty(selectColumnName))
            {
                nameKzExp = nameRuExp = p => p.Name;
            }
            else
            {
                switch(selectColumnName)
                {
                    case "Code":
                        nameKzExp = nameRuExp = r => r.Code.ToString();
                        break;
                    case "Name":
                        nameKzExp = nameRuExp = r => r.Name.ToString();
                        break;
                    case "DateStart":
                        nameKzExp = nameRuExp = r => string.Format("{0:d}", r.DateStart.ToString());
                        break;
                    case "DateEnd":
                        nameKzExp = nameRuExp = r => string.Format("{0:d}", r.DateEnd.ToString());
                        break;
                    default:
                        throw new ArgumentException("Íå íàéäåíà ñîîòâåòñòâóþùàÿ êîëîíêà", "selectColumnName");
                }
            }
        }
        
        
        
        bool _canEditAndDeleteExpressionInitialized = false;
        Expression _canEditAndDeleteExpCache;
        Expression _canEditExpCache;
        Expression _canDeleteExpCache;
        partial void SetCanEditAndDeleteExpression(BaseFilterEventArgs<DIC_MyFirstDictionary> filterArgs);
        partial void SetCanEditExpression(BaseFilterEventArgs<DIC_MyFirstDictionary> filterArgs);
        partial void SetCanDeleteExpression(BaseFilterEventArgs<DIC_MyFirstDictionary> filterArgs);
        partial void SetCanEditAndDeleteExpression(BaseFilterEventArgs<DIC_MyFirstDictionary, DBDataContext> filterArgs);
        partial void SetCanEditExpression(BaseFilterEventArgs<DIC_MyFirstDictionary, DBDataContext> filterArgs);
        partial void SetCanDeleteExpression(BaseFilterEventArgs<DIC_MyFirstDictionary, DBDataContext> filterArgs);
        
        private void GetEditAndDeleteExpressions(Expression expItem, Expression informationExp, out Expression canEditExp, out Expression canDeleteExp)
        {
            if (AllowSelectOnlyNames)
            {
                canEditExp = Expression.Constant(false);
                canDeleteExp = Expression.Constant(false);
                return;
            }
            Expression canEditExpression = null;
            Expression canDeleteExpression = null;
            Expression canEditAndDeleteExpression = null;
        
            if (_canEditAndDeleteExpressionInitialized)
            {
                canEditAndDeleteExpression = _canEditAndDeleteExpCache;
                canEditExpression = _canEditExpCache;
                canDeleteExpression = _canDeleteExpCache;
            }
            else
            {
                _canEditAndDeleteExpCache = canEditAndDeleteExpression = GetEditAndDeleteExpression(canEditAndDeleteExpression);
                _canEditExpCache = canEditExpression = GetEditExpression(canEditExpression);
                _canDeleteExpCache = canDeleteExpression = GetDeleteExpression(canDeleteExpression);
            }
            canEditExp = canEditExpression == null ? (Expression)Expression.Constant(true) : Expression.Invoke(canEditExpression, expItem);
            canDeleteExp = canDeleteExpression == null ? (Expression)Expression.Constant(true) : Expression.Invoke(canDeleteExpression, expItem);
            if (canEditAndDeleteExpression != null)
            {
                Expression canEditAndDeleteExp = Expression.Invoke(canEditAndDeleteExpression, expItem);
                canEditExp = Expression.And(canEditAndDeleteExp, canEditExp);
                canDeleteExp = Expression.And(canEditAndDeleteExp, canDeleteExp);
            }
        }
        
        public override BaseFilterEventArgs<DIC_MyFirstDictionary> GetEditAndDeleteFilter(Type typeOfData)
        {
            var filterArgs = base.GetEditAndDeleteFilter(typeOfData);
        
            SetCanEditAndDeleteExpression(filterArgs);
            SetCanEditAndDeleteExpression((BaseFilterEventArgs<DIC_MyFirstDictionary, DBDataContext>)filterArgs);
            return filterArgs;
        }
        /*
        public override Expression GetEditAndDeleteByParents<T>(Expression source, ParameterExpression param, Expression upToTable, IEnumerable<Expression> fieldsToCheckReference)
        {
        
            return source;
        }*/
        
        public override BaseFilterEventArgs<DIC_MyFirstDictionary> GetEditFilter(Type typeOfData)
        {
            var filterArgs = base.GetEditFilter(typeOfData);
        
            SetCanEditExpression(filterArgs);
            SetCanEditExpression((BaseFilterEventArgs<DIC_MyFirstDictionary, DBDataContext>)filterArgs);
            return filterArgs;
        }
        /*
        public override Expression GetEditByParents<T>(Expression source, ParameterExpression param, Expression upToTable, IEnumerable<Expression> fieldsToCheckReference)
        {
        
            return source;
        }*/
        
        public override BaseFilterEventArgs<DIC_MyFirstDictionary> GetDeleteFilter(Type typeOfData)
        {
            var filterArgs = base.GetDeleteFilter(typeOfData);
        
            SetCanDeleteExpression(filterArgs);
            SetCanDeleteExpression((BaseFilterEventArgs<DIC_MyFirstDictionary, DBDataContext>)filterArgs);
            return filterArgs;
        }
        /*
        public override Expression GetDeleteByParents<T>(Expression source, ParameterExpression param, Expression upToTable, IEnumerable<Expression> fieldsToCheckReference)
        {
        
            return source;
        }*/
        
        private List<ParentDataSourceViewInfo> _parentDataSources = null;
        partial void InitializeParentCollection(ICollection<ParentDataSourceViewInfo> parentDataSources);
        
        public override IEnumerable<ParentDataSourceViewInfo> GetParentCollection()
        {
            if (_parentDataSources != null) return _parentDataSources;
             _parentDataSources = new List<ParentDataSourceViewInfo>();
        
            InitializeParentCollection(_parentDataSources);
            return _parentDataSources;
        }
        
        Expression _canAddExpCache;
        
        partial void SetCanAddChildsExpression(BaseFilterEventArgs<DIC_MyFirstDictionary> filterArgs);
        
        protected override BaseFilterEventArgs<DIC_MyFirstDictionary> GetAddRule(Type typeOfData)
        {
            var filterArgs = base.GetAddRule(typeOfData);
        
            SetCanAddChildsExpression(filterArgs);
            return filterArgs;
        }
        
        public override IEnumerable<IQueryable> AllowAddRowGetSources(BaseNavigatorValues valuesT)
        {
            if (InitConnection != null) DB.Transaction = InitTransaction;
            var values = (DIC_MyFirstDictionaryNavigatorValues)valuesT;
            var sources = new List<IQueryable>();
            return sources;
        }
        
        public override IQueryable<DIC_MyFirstDictionary> GetSelectItems(long id)
        {
            if (InitConnection != null) DB.Transaction = InitTransaction;
            return DB.DIC_MyFirstDictionaries.Where(row => row.id == id);
        }
        
        public override IQueryable<DIC_MyFirstDictionary> GetSelectItems()
        {
            if (InitConnection != null) DB.Transaction = InitTransaction;
            return DB.DIC_MyFirstDictionaries;
        }
        
        /*
        private IQueryable<Row> ChangeSelect(IQueryable<DIC_MyFirstDictionary> query, string selectColumnName)
        {
            WriteTrace("DIC_MyFirstDictionaryJournalDataSourceView.ChangeSelect.Begin");
            var isKz = System.Globalization.CultureInfo.CurrentUICulture.Name.Equals("kk-kz", StringComparison.OrdinalIgnoreCase);
            var time = DateTime.Now;
            IQueryable<Row> result;
            if (_showHistory == null || _showHistory.Value)
                result = from p in query
                    select new Row
                               {
                                   id = p.id,
                                   Value = p.id.ToString(),
                                   Item = p,
                                   Lookup = new LookupValues
                                                {                                 },
                                   nameRu = p.Name.ToString(),
                                   nameKz = p.Name.ToString(),
                               };
            else
                result = from p in query
                    select new Row
                               {
                                   id = p.id,
                                   Value = p.id.ToString(),
                                   Item = p,
                                   Lookup = new LookupValues
                                                {                                 },
                                   nameRu = p.Name.ToString(),
                                   nameKz = p.Name.ToString(),
                               };
            if (!string.IsNullOrEmpty(selectColumnName))
            {
                switch(selectColumnName)
                {
                    case "id":
                        result = result.Select(r => 
                           new Row 
                           {
                               id = r.id,
                               Value = r.Value,
                               Item = r.Item,
                               Lookup = r.Lookup,
                               Information = r.Information,
                               nameRu = r.Item.id.ToString(),
                               nameKz = r.Item.id.ToString(),
                           });
                        break;
                    case "Code":
                        result = result.Select(r => 
                           new Row 
                           {
                               id = r.id,
                               Value = r.Value,
                               Item = r.Item,
                               Lookup = r.Lookup,
                               Information = r.Information,
                               nameRu = r.Item.Code.ToString(),
                               nameKz = r.Item.Code.ToString(),
                           });
                        break;
                    case "Name":
                        result = result.Select(r => 
                           new Row 
                           {
                               id = r.id,
                               Value = r.Value,
                               Item = r.Item,
                               Lookup = r.Lookup,
                               Information = r.Information,
                               nameRu = r.Item.Name.ToString(),
                               nameKz = r.Item.Name.ToString(),
                           });
                        break;
                    case "DateStart":
                        result = result.Select(r => 
                           new Row 
                           {
                               id = r.id,
                               Value = r.Value,
                               Item = r.Item,
                               Lookup = r.Lookup,
                               Information = r.Information,
                               nameRu = string.Format("{0:d}", r.Item.DateStart.ToString()),
                               nameKz = string.Format("{0:d}", r.Item.DateStart.ToString()),
                           });
                        break;
                    case "DateEnd":
                        result = result.Select(r => 
                           new Row 
                           {
                               id = r.id,
                               Value = r.Value,
                               Item = r.Item,
                               Lookup = r.Lookup,
                               Information = r.Information,
                               nameRu = string.Format("{0:d}", r.Item.DateEnd.ToString()),
                               nameKz = string.Format("{0:d}", r.Item.DateEnd.ToString()),
                           });
                        break;
                    case "RowVersion":
                        result = result.Select(r => 
                           new Row 
                           {
                               id = r.id,
                               Value = r.Value,
                               Item = r.Item,
                               Lookup = r.Lookup,
                               Information = r.Information,
                               nameRu = r.Item.RowVersion.ToString(),
                               nameKz = r.Item.RowVersion.ToString(),
                           });
                        break;
                    default:
                        throw new ArgumentException("Íå íàéäåíà ñîîòâåòñòâóþùàÿ êîëîíêà", "selectColumnName");
                }
            }
            WriteTrace("DIC_MyFirstDictionaryJournalDataSourceView.ChangeSelect.End");
            return result;
        }*/

        public Row GetRecord(long id)
        {
            WriteTrace("DIC_MyFirstDictionaryJournalDataSourceView.ChangeSelect.Begin");
            var query = DB.DIC_MyFirstDictionaries.AsQueryable();
            var resQuery = ChangeSelect(query, string.Empty);
            IQueryable<Row> result = null;
            //ChangeSelect(resQuery, ref result, DB);
            Row returnValue;
            if (result != null)
                returnValue = result.FirstOrDefault(p => p.Item.id == id);
            else
                returnValue = resQuery.FirstOrDefault(p => p.Item.id == id);
            WriteTrace("DIC_MyFirstDictionaryJournalDataSourceView.ChangeSelect.End");
            return returnValue;
        }

        partial void InitializeStoreModelPartial(Ext.Net.Model model);

        public virtual void InitializeStoreModel(Ext.Net.Model model)
        {
            // todo: Add full store model scheme
            InitializeStoreModelPartial(model);
        }

        public virtual void InitializeStoreModelAdditional(Ext.Net.Model model)
        {
            InitializeStoreModelPartial(model);
        }

        public long? GetIDBy_Code(System.String value)
        {
            return GetSelect().Where(r => r.Item.Code == value).Select(r => (long?)r.Item.id).FirstOrDefault();
        }

        public IQueryable<Row> SelectBy_Code(System.String value)
        {
            return GetSelect().Where(r => r.Item.Code == value);
        }

        public class Row : BaseRow
        {
            public Row()
            {
            }
        
            public Row(DIC_MyFirstDictionary item, LookupValues lookup, InformationValues information, string nameRu, string nameKz, bool canEdit, bool canDelete, bool canAddChild, Int64 id)
            {
                Item = item;
                Lookup = lookup;
                Information = information;
                this.id = id;
                Value = id.ToString();
                this.nameRu = nameRu;
                this.nameKz = nameKz;
                CanEdit = canEdit;
                CanDelete = canDelete;
                CanAddChild = canAddChild;
            }
        
            public override string nameRu 
            { 
                get { return base.nameRu; }
                set { base.nameRu = value; } 
            }
        
            public override string nameKz
            {
                get { return base.nameKz; }
                set { base.nameKz = value; }
            }
        
            public override bool CanEdit
            {
                get { return base.CanEdit; }
                set { base.CanEdit = value; }
            }
        
            public override bool CanDelete
            {
                get { return base.CanDelete; }
                set { base.CanDelete = value; }
            }
        
            public override bool CanAddChild
            {
                get { return base.CanAddChild; }
                set { base.CanAddChild = value; }
            }
        
            public override long id
            {
                get { return base.id; }
                set { base.id = value; }
            }
        
            private LookupValues _lookup;
            public LookupValues Lookup
            {
                get { return _lookup; }
                set 
                { 
                    _lookup = value;
                    if (Item != null)
                    {
                        // Åñëè íåò ïîëåé ñ çàïîëíåíèåì èç ÁÄ, òî èçáàâëÿåìñÿ îò äóáëèðîâàíèÿ îáúåêòà ó ñòðîê
                        // Ò.å. LinqToSql ïåðåäàåò îäèí îáúåêò âñåì ñòðîêàì, à òóò ìû ìåíÿåì ïîâåäåíèå.
                        if (_lookup.Item != null)
                            _lookup = new LookupValues { SelectedAdditionalValues = new object[0] };
                        _lookup.Item = Item;
                    }
                    if (Information != null)
                        Information.Lookup = _lookup;
                    _lookup.Row = this;
                }
            }
        
            private InformationValues _information;
            public InformationValues Information
            {
                get { return _information; }
                set 
                { 
                    _information = value;
                    if (Item != null && _information != null)
                        _information.Item = Item;
                    if (Lookup != null && _information != null)
                        _information.Lookup = Lookup;
                }
            }
        
            [NonSerialized]
            DIC_MyFirstDictionary _item;
            public DIC_MyFirstDictionary Item 
            {
                get { return _item; }
                set 
                { 
                    _item = value;
                    if (Lookup != null)
                        Lookup.Item = value;
                    if (Information != null)
                        Information.Item = value;
                }
            }
        
            public string AdditionalValues
            {
                get { return Lookup == null ? null : Ext.Net.JSON.Serialize(Lookup.SelectedAdditionalValues); }
            }
        
            public override string[] GetAdditionalValues(SelectParameters selectParameters)
            {
                return Lookup == null ? null : Lookup.SelectedAdditionalValues.Select((r, i) => string.Format(selectParameters.SelectValues[i].Format, r)).ToArray();
            }
        
            public override object[] GetAdditionalValues()
            {
                return Lookup == null ? null : Lookup.SelectedAdditionalValues;
            }
        
            public virtual void SetValue(string strValue)
            {
                Value = strValue;
        
            }
        }

        [Serializable]
        public partial class LookupValues
        {
            public LookupValues()
            {
            }
        
            public LookupValues(
        object[] selectedAdditionalValues)
            {        
                this.SelectedAdditionalValues = selectedAdditionalValues;
            }
            
        
            [NonSerialized]
            DIC_MyFirstDictionary _item;
        
            [ScriptIgnore]
            public DIC_MyFirstDictionary Item 
            {
                get { return _item; }
                set { _item = value; }
            }
        
            [NonSerialized]
            Row _row;
        
            [ScriptIgnore]
            public Row Row
            {
                get { return _row; }
                set { _row = value; }
            }
        
            public object [] SelectedAdditionalValues { get; set; }
        }
        
        public partial class InformationValues : BaseInformationValues
        {
            public InformationValues()
            {
            }
        
            [NonSerialized]
            private LookupValues _lookup;
        
            [ScriptIgnore]
            public LookupValues Lookup
            {
                get { return _lookup; }
                set 
                { 
                    _lookup = value;
                    if (Item != null)
                        _lookup.Item = Item;
                }
            }
        
            [NonSerialized]
            private DIC_MyFirstDictionary _item;
        
            [ScriptIgnore]
            public DIC_MyFirstDictionary Item
            {
                get { return _item; }
                set 
                { 
                    _item = value;
                    if (Lookup != null)
                        Lookup.Item = value;
                }
            }
        }
        
        public partial class ModelData : BaseRow
        {
            public ModelData()
            {
            }
        
            public System.Int64 id { get; set; }
        
            public System.String Code { get; set; }
        
            public System.String Name { get; set; }
        
            public System.DateTime DateStart { get; set; }
        
            public System.DateTime? DateEnd { get; set; }
        
            public System.Data.Linq.Binary RowVersion { get; set; }
        }
        
        
        
        public class LookupExpressions
        {
            private static readonly Expression NullExpression = Expression.Constant(null, typeof(string));
            private static readonly Expression NullIntExpression = Expression.Constant(0, typeof(int));
        
            private bool isKz { get; set; }
        
            public bool IsKz
            {
                get { return isKz; } 
                set { isKz = value; }
            }
        
            private bool showHistory { get; set; }
        
            public bool ShowHistory
            {
                get { return showHistory; } 
                set { showHistory = value; }
            }
        
            private QueryParameters qParams { get; set; }
        
            public QueryParameters QueryParameters
            {
                get { return qParams; } 
                set { qParams = value; }
            }
            
            public Func<MainPageUrlBuilder> GetUrl { get; set; }
        
            public DBDataContext DB { get; set; }
            public bool DefaultHidden { get; set; }
        }

        protected static IQueryable<DIC_MyFirstDictionary> SetSortExpression(string sortExpression, IQueryable source)
        {
            Expression expression = source.Expression;
            string str = "OrderBy";
            string str2 = "OrderByDescending";
            foreach (string orderBy in sortExpression.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                var split = orderBy.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                bool ascending = true;
                if (split.Length == 2)
                    ascending = split[1].Equals("Asc", StringComparison.OrdinalIgnoreCase);

                string orderByColumn = split[0];
                ParameterExpression param = Expression.Parameter(typeof(DIC_MyFirstDictionary), "c");
                Type fieldType;
                var property = LinqFilterGenerator.GetProperty(typeof(DIC_MyFirstDictionary), orderByColumn, param, out fieldType);
                expression = Expression.Call(typeof(Queryable), ascending ? str : str2,
                                             new[] { typeof(DIC_MyFirstDictionary), fieldType },
                                             expression,
                                             Expression.Lambda(property, param));
                str = "ThenBy";
                str2 = "ThenByDescending";
            }
            return (IQueryable<DIC_MyFirstDictionary>)source.Provider.CreateQuery(expression);
        }
    }

    #endregion

    #region DIC_MyFirstDictionaryJournalDataSource

    public class DIC_MyFirstDictionaryJournalDataSource : BaseDataSource<long, DIC_MyFirstDictionary, DBDataContext, DIC_MyFirstDictionaryJournalDataSourceView.Row>, IDataSource
    {
        private DIC_MyFirstDictionaryJournalDataSourceView view;

        public DIC_MyFirstDictionaryJournalDataSourceView View
        {
            get
            {
                if(view == null)
                    view = new DIC_MyFirstDictionaryJournalDataSourceView(this, "default");
                return view;
            }
        }

        public override BaseDataSourceView<long, DIC_MyFirstDictionary, DBDataContext, DIC_MyFirstDictionaryJournalDataSourceView.Row> BaseView2
        {
            get { return View; }
        }

        public DIC_MyFirstDictionaryJournalDataSourceView.Row GetRecord(long id)
        {
            return View.GetRecord(id);
        }
    }

    #endregion

    #region FileManager

    

    #endregion

    #region AccessOptions

    public static partial class DIC_MyFirstDictionaryAccessOptions
    {
        /// <summary>
        /// Èçìåíåíèå ïðîâåðêè ïðàâ, 
        /// åñëè replace = true, òî ïðàâåðêà ïðàâ âîçâðàùàåò isPermit, 
        /// èíà÷å ñòàíäàðòíàÿ ïðîâåðêà ïðàâ è isPermit
        /// </summary>
        static partial void ChangeCheckPermit(ref bool replace, ref bool isPermit);
        
        public static bool CheckPermit()
        {
            bool replace = false;
            bool isPermit = true;
            ChangeCheckPermit(ref replace, ref isPermit);
            return isPermit;
        }
    
        /// <summary>
        /// Èçìåíåíèå ïðîâåðêè ïðàâ, 
        /// åñëè replace = true, òî ïðàâåðêà ïðàâ âîçâðàùàåò isPermit, 
        /// èíà÷å ñòàíäàðòíàÿ ïðîâåðêà ïðàâ è isPermit
        /// </summary>
        static partial void ChangeCheckPermitAdd(ref bool replace, ref bool isPermit);
        
        public static bool CheckPermitAdd()
        {
            bool replace = false;
            bool isPermit = true;
            ChangeCheckPermitAdd(ref replace, ref isPermit);
            return isPermit;
        }
    
        /// <summary>
        /// Èçìåíåíèå ïðîâåðêè ïðàâ, 
        /// åñëè replace = true, òî ïðàâåðêà ïðàâ âîçâðàùàåò isPermit, 
        /// èíà÷å ñòàíäàðòíàÿ ïðîâåðêà ïðàâ è isPermit
        /// </summary>
        static partial void ChangeCheckPermitEdit(ref bool replace, ref bool isPermit);
        
        public static bool CheckPermitEdit()
        {
            bool replace = false;
            bool isPermit = true;
            ChangeCheckPermitEdit(ref replace, ref isPermit);
            return isPermit;
        }
    
        /// <summary>
        /// Èçìåíåíèå ïðîâåðêè ïðàâ, 
        /// åñëè replace = true, òî ïðàâåðêà ïðàâ âîçâðàùàåò isPermit, 
        /// èíà÷å ñòàíäàðòíàÿ ïðîâåðêà ïðàâ è isPermit
        /// </summary>
        static partial void ChangeCheckPermitDelete(ref bool replace, ref bool isPermit);
        
        public static bool CheckPermitDelete()
        {
            bool replace = false;
            bool isPermit = true;
            ChangeCheckPermitDelete(ref replace, ref isPermit);
            return isPermit;
        }
    }

    #endregion

    #region DIC_MyFirstDictionaryItemNavigatorsInitializer

    public partial class DIC_MyFirstDictionaryItemNavigatorsInitializer
    {
        protected MainPageUrlBuilder Url { get; set; }

        private DBDataContext _db;
        public DBDataContext DB
        {
            get
            {
                if (_db == null)
                {
                    _db = new DBDataContext(SpecificInstances.DbFactory.CreateConnection()) {ObjectTrackingEnabled = false};
                }

                return _db;
            }
            set { _db = value; }
        }

        partial void Initialize(IDictionary<Type, SelectedParameterNavigator.ItemNavigator> itemNavigators);

        public static void InitializeDic(IDictionary<Type, SelectedParameterNavigator.ItemNavigator> itemNavigators, MainPageUrlBuilder url)
        {
            var item = new DIC_MyFirstDictionaryItemNavigatorsInitializer();
            item.Url = url;
            item.Initialize(itemNavigators);
            var i = item as IItemNavigatorsInitializer;
            if (i != null) i.Initialize(itemNavigators);
        }
    }

    #endregion
   
    #region MultipleKeyClass
    
    

    #endregion

    #region ActivityController

    namespace UserControls
    {
        using JS.LinqToJavaScript.Attributes;
    
        [SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1121:UseBuiltInTypeAlias", Justification = "Reviewed. Suppression is OK here.")]
        [JavaScriptClass(ClassName = "DIC_MyFirstDictionaryActivityController", Namespace = "SampleDictionaries", BaseClassName = "JS.Web.ActivityController")]
        internal partial class DIC_MyFirstDictionaryActivityController : ActivityController
        {
            List<string> _activityControls;
            
            DIC_MyFirstDictionaryEdit.ControlInfo Info { get; set; }
            
            /// <summary>
            /// System code.
            /// </summary>
            [JavaScriptProperty]
            public ActivityControlCode CodeControl { get; set; }
            
            /// <summary>
            /// Name.
            /// </summary>
            [JavaScriptProperty]
            public ActivityControlName NameControl { get; set; }
            
            /// <summary>
            /// Date time Start.
            /// </summary>
            [JavaScriptProperty]
            public ActivityControlDateStart DateStartControl { get; set; }
            
            /// <summary>
            /// Date time End.
            /// </summary>
            [JavaScriptProperty]
            public ActivityControlDateEnd DateEndControl { get; set; }
            
            
            
            public override IEnumerable<string> ActivityControls
            {
                get 
                {
                    InitializeActivityControls();
                    return _activityControls;
                }
            }
    
            partial void InitializeActivity();
            partial void InitializeActivityControls(List<string> activityControls);
    
            public void Initialize(Control form, Dictionary<string, object> values, DIC_MyFirstDictionaryEdit.ControlInfo info)
            {
                Info = info;
                ReadOnly = info.IsRead;
                IsNew = info.IsNew;
                Control control;
                string controlID;
                string clientID;
                control = info.CodeControl;
                controlID = control == null ? null : control.ID;
                clientID = control == null ? null : control.ClientID;
                CodeControl = new ActivityControlCode(this, "Code", controlID);
                CodeControl.ClientID = clientID;
                CodeControl.Control = info.CodeControl;
                CodeControl.ReadOnlyChanged += (sender, args) =>
                    {
                        if (info.CodeControl != null)
                            info.CodeControl.ReadOnly = args.Value;
                    };
                CodeControl.DefaultAllowRequiredValidate = true;
                CodeControl.AllowRequiredValidateChanged += Nat.Web.Controls.ExtNet.Generation.ActivityControlExtensions.AllowRequiredValidateChanged(info.CodeControl);
                CodeControl.DefaultReadOnly = false;
                CodeControl.VisibleChanged += (sender, args) =>
                    {
                        if (info.CodeControl != null)
                        {
                            info.CodeControl.Hidden = !args.Value;
                            AbstractContainerExtender.SetHiddenControlContainer(info.CodeControl);
                        }
                    };
                CodeControl.EnabledChanged += (sender, args) =>
                    {
                        if (info.CodeControl != null)
                            info.CodeControl.Disabled = !args.Value;
                    };
                CodeControl.AllowValidateChanged += delegate(object sender, ActivityChangedEventArgs args)
                    {
                        if (info.CodeControl != null)
                            SetEnabledToValidators(form.Page, ValidationGroup, info.CodeControl.ID, args.Value);
                    };
                CodeControl.GetControlValueHandler = () => info.Code;
            
                control = info.NameControl;
                controlID = control == null ? null : control.ID;
                clientID = control == null ? null : control.ClientID;
                NameControl = new ActivityControlName(this, "Name", controlID);
                NameControl.ClientID = clientID;
                NameControl.Control = info.NameControl;
                NameControl.ReadOnlyChanged += (sender, args) =>
                    {
                        if (info.NameControl != null)
                            info.NameControl.ReadOnly = args.Value;
                    };
                NameControl.DefaultAllowRequiredValidate = true;
                NameControl.AllowRequiredValidateChanged += Nat.Web.Controls.ExtNet.Generation.ActivityControlExtensions.AllowRequiredValidateChanged(info.NameControl);
                NameControl.DefaultReadOnly = false;
                NameControl.VisibleChanged += (sender, args) =>
                    {
                        if (info.NameControl != null)
                        {
                            info.NameControl.Hidden = !args.Value;
                            AbstractContainerExtender.SetHiddenControlContainer(info.NameControl);
                        }
                    };
                NameControl.EnabledChanged += (sender, args) =>
                    {
                        if (info.NameControl != null)
                            info.NameControl.Disabled = !args.Value;
                    };
                NameControl.AllowValidateChanged += delegate(object sender, ActivityChangedEventArgs args)
                    {
                        if (info.NameControl != null)
                            SetEnabledToValidators(form.Page, ValidationGroup, info.NameControl.ID, args.Value);
                    };
                NameControl.GetControlValueHandler = () => info.Name;
            
                control = info.DateStartControl;
                controlID = control == null ? null : control.ID;
                clientID = control == null ? null : control.ClientID;
                DateStartControl = new ActivityControlDateStart(this, "DateStart", controlID);
                DateStartControl.ClientID = clientID;
                DateStartControl.Control = info.DateStartControl;
                DateStartControl.ReadOnlyChanged += (sender, args) =>
                    {
                        if (info.DateStartControl != null)
                            info.DateStartControl.ReadOnly = args.Value;
                    };
                DateStartControl.DefaultAllowRequiredValidate = true;
                DateStartControl.AllowRequiredValidateChanged += Nat.Web.Controls.ExtNet.Generation.ActivityControlExtensions.AllowRequiredValidateChanged(info.DateStartControl);
                DateStartControl.DefaultReadOnly = false;
                DateStartControl.VisibleChanged += (sender, args) =>
                    {
                        if (info.DateStartControl != null)
                        {
                            info.DateStartControl.Hidden = !args.Value;
                            AbstractContainerExtender.SetHiddenControlContainer(info.DateStartControl);
                        }
                    };
                DateStartControl.EnabledChanged += (sender, args) =>
                    {
                        if (info.DateStartControl != null)
                            info.DateStartControl.Disabled = !args.Value;
                    };
                DateStartControl.AllowValidateChanged += delegate(object sender, ActivityChangedEventArgs args)
                    {
                        if (info.DateStartControl != null)
                            SetEnabledToValidators(form.Page, ValidationGroup, info.DateStartControl.ID, args.Value);
                    };
                DateStartControl.GetControlValueHandler = () => info.DateStart;
            
                control = info.DateEndControl;
                controlID = control == null ? null : control.ID;
                clientID = control == null ? null : control.ClientID;
                DateEndControl = new ActivityControlDateEnd(this, "DateEnd", controlID);
                DateEndControl.ClientID = clientID;
                DateEndControl.Control = info.DateEndControl;
                DateEndControl.ReadOnlyChanged += (sender, args) =>
                    {
                        if (info.DateEndControl != null)
                            info.DateEndControl.ReadOnly = args.Value;
                    };
                DateEndControl.DefaultAllowRequiredValidate = false;
                DateEndControl.AllowRequiredValidateChanged += Nat.Web.Controls.ExtNet.Generation.ActivityControlExtensions.AllowRequiredValidateChanged(info.DateEndControl);
                DateEndControl.DefaultReadOnly = false;
                DateEndControl.VisibleChanged += (sender, args) =>
                    {
                        if (info.DateEndControl != null)
                        {
                            info.DateEndControl.Hidden = !args.Value;
                            AbstractContainerExtender.SetHiddenControlContainer(info.DateEndControl);
                        }
                    };
                DateEndControl.EnabledChanged += (sender, args) =>
                    {
                        if (info.DateEndControl != null)
                            info.DateEndControl.Disabled = !args.Value;
                    };
                DateEndControl.AllowValidateChanged += delegate(object sender, ActivityChangedEventArgs args)
                    {
                        if (info.DateEndControl != null)
                            SetEnabledToValidators(form.Page, ValidationGroup, info.DateEndControl.ID, args.Value);
                    };
                DateEndControl.GetControlValueHandler = () => info.DateEnd;
            
                InitializeControls(
                    CodeControl,
                    NameControl,
                    DateStartControl,
                    DateEndControl);
            
                Initialize(form, values);
                FormID = Info.FormControl.ClientID;
            
                InitializeActivity();
            }
            
            public override void Initialize(Control form, Dictionary<string, object> values)
            {
                if (form == null)
                {
                    CodeControl = new ActivityControlCode(this, "Code", null);
                    NameControl = new ActivityControlName(this, "Name", null);
                    DateStartControl = new ActivityControlDateStart(this, "DateStart", null);
                    DateEndControl = new ActivityControlDateEnd(this, "DateEnd", null);
            
                    InitializeActivity();
                }
            
                base.Initialize(form, values);
            }
            
            protected void InitializeActivityControls()
            {
                if (_activityControls != null) return;
            
                _activityControls = new List<string>
                    {
                        "codeControl",
                        "nameControl",
                        "dateStartControl",
                        "dateEndControl",
                    };
                InitializeActivityControls(_activityControls);
            }
            
            
            
            /// <summary>
            /// System code.
            /// </summary>
            [JavaScriptClass(ClassName = "DIC_MyFirstDictionaryActivityController_ActivityControlCode", Namespace = "SampleDictionaries", BaseClassName = "JS.Web.ActivityController")]
            public class ActivityControlCode : ActivityControlClassValue<DIC_MyFirstDictionaryActivityController, String>
            {
                public ActivityControlCode(DIC_MyFirstDictionaryActivityController activityController, string controlID, string controlName)
                    : base(activityController, controlID, controlName)
                {
                }
            }
            
            /// <summary>
            /// Name.
            /// </summary>
            [JavaScriptClass(ClassName = "DIC_MyFirstDictionaryActivityController_ActivityControlName", Namespace = "SampleDictionaries", BaseClassName = "JS.Web.ActivityController")]
            public class ActivityControlName : ActivityControlClassValue<DIC_MyFirstDictionaryActivityController, String>
            {
                public ActivityControlName(DIC_MyFirstDictionaryActivityController activityController, string controlID, string controlName)
                    : base(activityController, controlID, controlName)
                {
                }
            }
            
            /// <summary>
            /// Date time Start.
            /// </summary>
            [JavaScriptClass(ClassName = "DIC_MyFirstDictionaryActivityController_ActivityControlDateStart", Namespace = "SampleDictionaries", BaseClassName = "JS.Web.ActivityController")]
            public class ActivityControlDateStart : ActivityControl<DIC_MyFirstDictionaryActivityController, DateTime>
            {
                public ActivityControlDateStart(DIC_MyFirstDictionaryActivityController activityController, string controlID, string controlName)
                    : base(activityController, controlID, controlName)
                {
                }
            }
            
            /// <summary>
            /// Date time End.
            /// </summary>
            [JavaScriptClass(ClassName = "DIC_MyFirstDictionaryActivityController_ActivityControlDateEnd", Namespace = "SampleDictionaries", BaseClassName = "JS.Web.ActivityController")]
            public class ActivityControlDateEnd : ActivityControl<DIC_MyFirstDictionaryActivityController, DateTime>
            {
                public ActivityControlDateEnd(DIC_MyFirstDictionaryActivityController activityController, string controlID, string controlName)
                    : base(activityController, controlID, controlName)
                {
                }
            }
        }
    }

    #endregion

    #region ValidateInformationForm

    namespace UserControls
    {
        [SuppressMessage("StyleCop.CSharp.NamingRules", "SA1306:FieldNamesMustBeginWithLowerCaseLetter", Justification = "Reviewed. Suppression is OK here.")]
        internal class DIC_MyFirstDictionaryValidateInformationForm : Nat.Web.Controls.ExtNet.Validators.ValidateInformationForm
        {
            private ValidateInformation _Code;
            private ValidateInformation _Name;
            private ValidateInformation _DateStart;
            private ValidateInformation _DateEnd;
    
            public DIC_MyFirstDictionaryValidateInformationForm(Control form)
                : base(form)
            {
            }
    
            public ValidateInformation Code
            {
                get
                {
                    if (_Code == null)
                    {
                        _Code = new ValidateInformation();
                        Validators["Code"] = _Code;
                    }
            
                    return _Code;
                }
            }
            
            public ValidateInformation Name
            {
                get
                {
                    if (_Name == null)
                    {
                        _Name = new ValidateInformation();
                        Validators["Name"] = _Name;
                    }
            
                    return _Name;
                }
            }
            
            public ValidateInformation DateStart
            {
                get
                {
                    if (_DateStart == null)
                    {
                        _DateStart = new ValidateInformation();
                        Validators["DateStart"] = _DateStart;
                    }
            
                    return _DateStart;
                }
            }
            
            public ValidateInformation DateEnd
            {
                get
                {
                    if (_DateEnd == null)
                    {
                        _DateEnd = new ValidateInformation();
                        Validators["DateEnd"] = _DateEnd;
                    }
            
                    return _DateEnd;
                }
            }
    
            public void AddDefaultValidatorsForCode(DIC_MyFirstDictionaryEdit.ControlInfo info)
            {
                Code.RequiredValidatorPropertieses.Add(new RequiredValidatorProperties { InitialValue = "" });
                if (Validators.ContainsKey("Code"))
                {
                    var validator = Code.RequiredValidatorPropertieses.FirstOrDefault();
                    if (validator != null && string.IsNullOrEmpty(validator.ErrorMessageInSummary))
                        validator.ErrorMessageInSummary = DIC_MyFirstDictionaryEdit.GetRequiredMessage_Code();
                    if (validator != null && validator.InitialValue == null)
                        validator.InitialValue = "";
                }
            }
            
            public void AddDefaultValidatorsForName(DIC_MyFirstDictionaryEdit.ControlInfo info)
            {
                Name.RequiredValidatorPropertieses.Add(new RequiredValidatorProperties { InitialValue = "" });
                if (Validators.ContainsKey("Name"))
                {
                    var validator = Name.RequiredValidatorPropertieses.FirstOrDefault();
                    if (validator != null && string.IsNullOrEmpty(validator.ErrorMessageInSummary))
                        validator.ErrorMessageInSummary = DIC_MyFirstDictionaryEdit.GetRequiredMessage_Name();
                    if (validator != null && validator.InitialValue == null)
                        validator.InitialValue = "";
                }
            }
            
            public void AddDefaultValidatorsForDateStart(DIC_MyFirstDictionaryEdit.ControlInfo info)
            {
                DateStart.RequiredValidatorPropertieses.Add(new RequiredValidatorProperties { InitialValue = "" });
                if (Validators.ContainsKey("DateStart"))
                {
                    var validator = DateStart.RequiredValidatorPropertieses.FirstOrDefault();
                    if (validator != null && string.IsNullOrEmpty(validator.ErrorMessageInSummary))
                        validator.ErrorMessageInSummary = DIC_MyFirstDictionaryEdit.GetRequiredMessage_DateStart();
                    if (validator != null && validator.InitialValue == null)
                        validator.InitialValue = "";
                }
            }
            
            public void AddDefaultValidatorsForDateEnd(DIC_MyFirstDictionaryEdit.ControlInfo info)
            {
                if (Validators.ContainsKey("DateEnd"))
                {
                    var validator = DateEnd.RequiredValidatorPropertieses.FirstOrDefault();
                    if (validator != null && string.IsNullOrEmpty(validator.ErrorMessageInSummary))
                        validator.ErrorMessageInSummary = DIC_MyFirstDictionaryEdit.GetRequiredMessage_DateEnd();
                    if (validator != null && validator.InitialValue == null)
                        validator.InitialValue = "";
                }
            }
        }
    }

    #endregion

    #region TableRowsConsts

    public static class DIC_MyFirstDictionaryRowsConsts
    {
    
    }

    #endregion

    #region NavigatorControl

    public partial class DIC_MyFirstDictionaryNavigatorControl : BaseNavigatorControl<DIC_MyFirstDictionaryNavigatorValues>
    {
        public override Type NavigatorType { get { return typeof(DIC_MyFirstDictionaryNavigatorInfo); } }
    }

    #endregion

    #region NavigatorValues

    public partial class DIC_MyFirstDictionaryNavigatorValues : BaseNavigatorValues
    {
        public long? DIC_MyFirstDictionary
        {
            get
            {
                if (!Values.ContainsKey(typeof(DIC_MyFirstDictionary))) return null;
                return (long?)Values[typeof(DIC_MyFirstDictionary)];
            }
            set
            {
                Values[typeof(DIC_MyFirstDictionary)] = value;
            }
        }
    
        protected override string TableName { get { return "DIC_MyFirstDictionary"; } }
    }

    #endregion

    #region NavigatorInfoAllClasses

    public partial class DIC_MyFirstDictionaryNavigatorInfo : BaseNavigatorInfo
    {
        public override Type TableType { get { return typeof(DIC_MyFirstDictionary); } }
        public override Type DataSourceViewType { get { return typeof(DIC_MyFirstDictionaryJournalDataSourceView); } }
        public override string TableName { get { return "DIC_MyFirstDictionary"; } }
        public override string Header { get { return DIC_MyFirstDictionaryResources.Header; } }
        public override string HeaderToChilds { get { return ""; } }
        public override string HeaderToParent { get { return ""; } }
        public override string ReferenceName { get { return ""; } }
        
        public override void Initialize()
        {
            BaseInitialize();
            
        }
        
        
    }

    #endregion

    #region ViewModeClass

    public enum ViewModeDIC_MyFirstDictionary
    {
        none,
    }

    #endregion

    #region AdditionalRowInfoClasses

    

    #endregion

    #region TableParametersClasses

    

    #endregion

    #region TableInterface

    

    #endregion

    #region GetCacheNamesClass

    public static class DIC_MyFirstDictionaryCacheNames
    {
    
        public static string GetNameRu(DataContext db, long? rowValue)
        {
            return CacheQueries.GetNameCached<DIC_MyFirstDictionary, long?, string>(
                        db, rowValue, (r, id) => r.id == id, r => r.Name);
        }
    
        public static string GetName(DataContext db, long? rowValue)
        {
            return CacheQueries.GetNameCached<DIC_MyFirstDictionary, long?, string>(
                        db, 
                        rowValue, 
                        (r, id) => r.id == id, 
                        r => r.Name, 
                        new ExpressionCulture<Func<DIC_MyFirstDictionary, string>>("kk-kz", r => r.Name));
        }
        
        public static void ClearCache(DataContext db, long? rowValue)
        {
            if (rowValue == null)
                return;
            CacheQueries.ClearCache<DIC_MyFirstDictionary, long?, string>(
                db,
                rowValue.Value, 
                (r, id) => r.id == id, 
                r => r.Name, 
                new ExpressionCulture<Func<DIC_MyFirstDictionary, string>>("kk-kz", r => r.Name));
        }
    }

    #endregion

    #region ComboBoxViews

    

    #endregion
}
#pragma warning restore
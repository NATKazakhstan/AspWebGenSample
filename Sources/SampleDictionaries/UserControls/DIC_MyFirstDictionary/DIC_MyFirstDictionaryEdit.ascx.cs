/*
 * Generated by: Sergey.Shpakovskiy
 * Generated at: 1.0.0.2
 * Copyright © JSC NAT Kazakhstan 2011
 */
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data.SqlClient;
using System.Drawing.Design;
using System.Globalization;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Xml.Linq;
using System.Web;
using System.Web.Compilation;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Net.Mail;
using System.Net;
using System.Collections.Specialized;
using System.Web.Configuration;
using SampleDictionaries.Properties;


using Nat.Tools.Specific;
using Nat.Web.Controls;
using Nat.Web.Controls.BaseLogic;
using Nat.Web.Controls.Data;
using Nat.Web.Controls.DateTimeControls;
using Nat.Web.Controls.GenerationClasses;
using Nat.Web.Controls.GenerationClasses.Data;
using Nat.Web.Controls.GenerationClasses.Navigator;
using Nat.Web.Controls.HistoryFilters;
using Nat.Web.Controls.Preview;
using Nat.Web.Controls.SelectValues;
using Nat.Web.Tools;
using Nat.Web.Tools.Security;
using Nat.Web.Tools.WorkFlow;
using AccessOptions = SampleDictionaries.DIC_MyFirstDictionaryAccessOptions;
using TableResources = SampleDictionaries.Properties.TableResources;

using Nat.Web.Tools.MailMessageContent;
using SampleDictionaries.Security;
using Nat.Web.Tools.ExtNet;
using Nat.Web.Tools.ExtNet.Extenders;
using Nat.Web.Tools.ExtNet.ExtNetConfig;
using Ext.Net;
using NullableTextBox = Ext.Net.NumberField;
using TextBox = Ext.Net.TextField;
using Label = Ext.Net.Label;
using DropDownListExt = Ext.Net.ComboBox;
using CheckBox = Ext.Net.Checkbox;
using RadioButton = Ext.Net.Radio;
using RadioButtonList = Ext.Net.RadioGroup;
using ImageButton = Ext.Net.ImageButton;
using HyperLink = Ext.Net.HyperLink;
using LinkButton = Ext.Net.LinkButton;
using DatePicker = Ext.Net.DateField;
using Panel = Ext.Net.Panel;
using Container = Ext.Net.Container;
using Newtonsoft.Json.Linq;
using AdditionalButtons = Nat.Web.Controls.ExtNet.AdditionalButtons;
using BrowseFilterParameters = Nat.Web.Tools.ExtNet.ExtNetBrowseFilterParameters;
using DBDataContext = SampleDictionaries.DBDataContext;

namespace SampleDictionaries.UserControls
{
    /// <summary>
    /// Контрол для просмотра, редактирования и добавления записей таблицы "My First Dictionary" (DIC_MyFirstDictionary)
    /// </summary>
    [DefaultEvent("SelectedIndexChanged")]
    [ControlValueProperty("SelectedValue")]
    public partial class DIC_MyFirstDictionaryEdit : Nat.Web.Controls.ExtNet.Generation.AbstractUserControl, IAccessControl, IScriptControl
    {
        #region Fields

        private DBDataContext _db;
        private long? refDIC_MyFirstDictionary;
        private IEnumerable<ILogic> logics = new ILogic[] { new PeriodHistory() };
        private bool _isStartAction;
        private List<string> _addErrorMessages;
        private ControlInfo _info;
        private bool editlogicExecuted;
        private bool readlogicExecuted;
        private bool insertlogicExecuted;
        private bool _setDefaultValues;
        private bool _isNoPermit;
        private bool _selectedRowInited;
        private DIC_MyFirstDictionaryJournalDataSourceView.Row _selectedRow;
        private DIC_MyFirstDictionary _currentRow;
        private long? refLogMessage;
        private bool selectedValueInitialized;

        #endregion

        #region Partials

        partial void ReadLogic();
        partial void EditLogic();
        partial void InsertLogic();
        partial void EditInsertLogic();
        partial void Logic();
        partial void OnUpdating(DIC_MyFirstDictionary newItem, DIC_MyFirstDictionary originalItem);
        partial void OnInserting(DIC_MyFirstDictionary newItem);
        partial void OnContextCreating(LinqDataSourceContextEventArgs e);
        partial void OnUpdated(LinqDataSourceStatusEventArgs e);
        partial void OnInserted(LinqDataSourceStatusEventArgs e);
        partial void OnDispose();
        partial void UpdateRefDIC_MyFirstDictionary(DIC_MyFirstDictionary row);
        partial void GetDefaultProperties(Dictionary<Type, List<string>> typeProperies);
        partial void GenerateAdditionalButtons(AdditionalButtons buttons);
        partial void GetBrowseFilterParameters(string fieldName, BrowseFilterParameters parameters);
        partial void GetValidators_Code(ValidateInformation validateInformation);
        partial void GetValidators_Name(ValidateInformation validateInformation);
        partial void GetValidators_DateStart(ValidateInformation validateInformation);
        partial void GetValidators_DateEnd(ValidateInformation validateInformation);
        partial void ChangeLogTypeAdd(ref LogMessageType logType);
        partial void ChangeLogTypeLook(ref LogMessageType logType);
        partial void ChangeLogTypeEdit(ref LogMessageType logType);
        partial void ChangeLogTypeAdd(ref long logType);
        partial void ChangeLogTypeLook(ref long logType);
        partial void ChangeLogTypeEdit(ref long logType);
        partial void ChangeLogContent(ref string content, DIC_MyFirstDictionary newItem, DIC_MyFirstDictionary oldItem);
        partial void ChangeLogContentAdd(ref string content, DIC_MyFirstDictionary newItem);
        partial void ChangeLogContentLook(ref string content, DIC_MyFirstDictionary item);
        partial void ChangeLogContentEdit(ref string content, DIC_MyFirstDictionary newItem, DIC_MyFirstDictionary oldItem);
        partial void InitControlPanels();
        partial void OnPreRender();
        partial void OnInsertedPartial(DIC_MyFirstDictionary newRow, bool inserted);
        partial void OnUpdatedPartial(DIC_MyFirstDictionary newRow, DIC_MyFirstDictionary originalItem, bool updated);
        partial void RemoteValidation_Code(JValue value, RemoteValidationEventArgs e);
        partial void RemoteValidation_Name(JValue value, RemoteValidationEventArgs e);
        partial void RemoteValidation_DateStart(JValue value, RemoteValidationEventArgs e);
        partial void RemoteValidation_DateEnd(JValue value, RemoteValidationEventArgs e);

        #endregion

        #region Properties

        public DBDataContext DB
        {
            get
            {
                if (_db == null)
                {
                    _db = new DBDataContext(SpecificInstances.DbFactory.CreateConnection());
                }
        
                return _db;
            }
        }
        
        private List<string> AddErrorMessages
        {
            get
            {
                if (_addErrorMessages == null)
                    _addErrorMessages = source.View.AllowAddRowForTableTypes(NavigatorControl.Values, DIC_MyFirstDictionaryResources.Header);
        
                return _addErrorMessages;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public ControlInfo Info
        {
            get
            {
                if (_info == null) 
                    _info = new ControlInfo(this){ DB = DB };
        
                return _info;
            }
        }
        
        protected bool RecordIsNew
        {
            get { return IsNew; }
        }
        
        protected bool RecordIsEditing
        {
            get { return SelectedValueKey != null && !IsNew && !IsRead; }
        }
        
        /// <summary>
        /// Действие логики выполняеться на начало редактирования или добавления записи, 
        /// true только однажды, при начале действий (открытии на редактирования или добавление).
        /// </summary>
        protected bool IsStartAction
        {
            get { return _isStartAction; }
        }
        
        public DIC_MyFirstDictionaryJournalDataSourceView.Row SelectedRow
        {
            get
            {
                if (_selectedRow == null && !_selectedRowInited)
                {
                    if (string.IsNullOrEmpty(hfid.Text))
                        return null;
        
                    var key = Convert.ToInt64(hfid.Value);
                    _selectedRow = source.View.GetSelect(key).FirstOrDefault();
                    _selectedRowInited = true;
                }
        
                return _selectedRow;
            }
        }
        
        public DIC_MyFirstDictionaryJournalDataSourceView.LookupValues SelectedLookup
        {
            get
            {
                if (ViewState["SelectedLookup"] != null)
                    return (DIC_MyFirstDictionaryJournalDataSourceView.LookupValues)ViewState["SelectedLookup"];
        
                var row = SelectedRow;
                if (row == null || row.Lookup == null)
                    return null;
        
                ViewState["SelectedLookup"] = row.Lookup;
                return row.Lookup;
            }
        }
        
        private DIC_MyFirstDictionary currentRow
        {
            get 
            {
                if (_currentRow == null && SelectedRow != null)
                    _currentRow = SelectedRow.Item;
        
                return _currentRow;
            }
            set { _currentRow = value; }
        }
        
        private bool HasErrors { get; set; }
        
        private string SessionKey
        { 
            get { return string.IsNullOrEmpty(hfSessionKey.Text) ? (hfSessionKey.Text = Request.Form[hfSessionKey.UniqueID] ?? Guid.NewGuid().ToString("N")) : hfSessionKey.Text; }
            set { hfSessionKey.Text = value; }
        }
        
        public override bool IsNew
        {
            get { return SelectedValueKey == null && base.IsNew; }
        }
        
        private DIC_MyFirstDictionaryActivityController ActivityController { get; set; }
        
        private bool ActivityControllerInitialized { get; set; }
        
        private bool ValidateInformationFormInitialized { get; set; }
        
        private DIC_MyFirstDictionaryValidateInformationForm ValidateInformationForm { get; set; }

        [Browsable(false)]
        public long? SelectedValueKey
        {
            get 
            {
                if (!IsPostBack && !selectedValueInitialized && Url.QueryParameters.ContainsKey("refDIC_MyFirstDictionary"))
                {
                    selectedValueInitialized = true;
                    string value = Url.QueryParameters["refDIC_MyFirstDictionary"];
                    if (!string.IsNullOrEmpty(value))
                        SelectedValueKey = Convert.ToInt64(value);
                }

                if (string.IsNullOrEmpty(hfid.Text))
                    return null;

                var key = Convert.ToInt64(hfid.Value);
                return key;
            }

            private set
            {
                hfid.Value = value == null 
                    ? string.Empty
                    : value.ToString();
            }
        }

        #region ISelectedValue Members
        
        [Browsable(false)]
        public override long SelectedValueLong
        {
            get 
            { 
                throw new NotImplementedException();
            }
        }
        
        public long? ParentID { get; set; }
        public bool IsSelectParentRows { get; set; }
        
        [Browsable(false)]
        public long? SelectedValueOrParentValue
        {
            get 
            {
                return SelectedValueKey;
            }
        }
        
        [Browsable(false)]
        public override object SelectedValue
        {
            get { return SelectedValueKey; }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public override DataKey SelectedDataKey
        {
            get 
            {
                throw new NotImplementedException();
            }
        }
        
        [DefaultValue("ID")]
        [Editor(
            "System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
            , typeof(UITypeEditor))]
        [TypeConverter(typeof(StringArrayConverter))]
        [Category("Data")]
        public override string[] DataKeyNames
        {
            get 
            { 
                throw new NotImplementedException();
            }
        
            set
            { 
                throw new NotImplementedException();
            }
        }
        
        public override Type TableType
        {
            get { return typeof(DIC_MyFirstDictionary); }
        }
        
        #endregion
        
        #endregion
        
        #region Methods
        
        public override void Dispose()
        {
            if (DB.Transaction != null)
                RollbackDBTransaction();
        
            DB.Dispose();
            OnDispose();
            base.Dispose();
        }
        
        protected DbTransaction BeginTransaction()
        {
            if (DB.Connection.State == ConnectionState.Closed)
                DB.Connection.Open();
            var transaction = DB.Transaction = DB.Connection.BeginTransaction();
            InitTransaction();
            return transaction;
        }
        
        protected void CommitDBTransaction()
        {
            if (DB.Transaction.Connection != null)
                DB.Transaction.Commit();
            EndTransaction();  
        }
        
        protected void RollbackDBTransaction()
        {
            if (DB.Transaction.Connection != null)
                DB.Transaction.Rollback();
            EndTransaction();  
        }
        
        protected void EndTransaction()
        {
            DB.Transaction?.Dispose();
            DB.Transaction = null;
            InitTransaction();
            
            if (DB.Connection.State == ConnectionState.Open)
                DB.Connection.Close();
        }
        
        protected void InitTransaction()
        {
            source.View.InitTransaction = DB.Transaction;
        }
        
        protected void InitConnection()
        {
            source.View.InitConnection = DB.Connection;
        }
        
        protected bool AddErrorMessage(IEnumerable<string> errors)
        {
            if (errors != null && errors.Any())
            {
                foreach (var message in errors)
                    AddErrorMessage(message);
                return true;
            }
        
            return false;
        }
        
        
        private Dictionary<Type, List<string>> GetDefaultProperties()
        {
            var properties = (Dictionary<Type, List<string>>)Cache["DIC_MyFirstDictionary_DefaultProperties"];
            if (properties == null)
            {
                properties = new Dictionary<Type, List<string>>();
        
                foreach (var property in typeof(DIC_MyFirstDictionary).GetProperties())
                {
                    var attributes = (AssociationAttribute[])property.GetCustomAttributes(typeof(AssociationAttribute), false);
                    if(attributes != null && attributes.Length == 1 && attributes[0].IsForeignKey && !"refHistory".Equals(attributes[0].ThisKey))
                    {
                        if(!properties.ContainsKey(property.PropertyType))
                            properties.Add(property.PropertyType, new List<string>());
                        properties[property.PropertyType].Add(attributes[0].ThisKey);
                    }
                }
        
                GetDefaultProperties(properties);
                Cache["DIC_MyFirstDictionary_DefaultProperties"] = properties;
            }
        
            return properties;
        }
        
        protected string GetBrowseUrl(string fieldName, object value, long? id)
        {
            var parameters = new BrowseFilterParameters();
            string selectColumnName = null;
            switch (fieldName)
            {
        
            }
        
            var jss = new JavaScriptSerializer();
            return jss.Serialize(new Triplet(parameters.ClientControlParameters, parameters.ClientValueParameters, selectColumnName));
        }
        
        protected virtual void EnsureLogicExecute()
        {
            if (SelectedValueKey == null && !IsNew)
                return;
            var executing = false;
            Trace.Write("DIC_MyFirstDictionary", "DIC_MyFirstDictionaryEdit.EnsureLogicExecute.Begin");
            if (SelectedValueKey != null && IsRead && !readlogicExecuted)
            {
                readlogicExecuted = true;
                Info.IsRead = true;
                Info.ComputeReadOnlyFields(true);
                ReadLogic();
                Logic();
                executing = true;
            }
        
            if (SelectedValueKey != null && !IsNew && !IsRead && !editlogicExecuted)
            {
                editlogicExecuted = true;
                Info.IsEdit = true;
                Info.ComputeReadOnlyFields(true);
                UploadFiles();
                ExecuteEditLogic();
                EditInsertLogic();
                Logic();
                InitializeFilterParameters();
                executing = true;
            }
        
            if (IsNew && !insertlogicExecuted)
            {
                insertlogicExecuted = true;
                Info.IsInsert = true;
                if (IsStartAction)
                    SetDefaultValues();
                Info.ComputeReadOnlyFields(true);
                UploadFiles();
                ExecuteInsertLogic();
                EditInsertLogic();
                Logic();
                InitializeFilterParameters();
                executing = true;
            }
        
            if (executing)
            {
                foreach (var logic in logics)
                {
                    logic.IsEdit = SelectedValueKey != null && !IsNew && !IsRead;
                    logic.IsNew = IsNew;
                    logic.IsStartAction = IsStartAction;
                    logic.ControlInfo = Info;
                    logic.NavigatorValues = NavigatorControl.Values;
                    logic.Url = Url;
                    logic.Logic();
                }
        
                Info.ComputeReadOnlyFields(false);
                if (IsStartAction && IsNew)
                    ValidateReferences(true);
            }
        
            Trace.Write("DIC_MyFirstDictionary", "DIC_MyFirstDictionaryEdit.EnsureLogicExecute.End");
        }
        
        protected virtual void ExecuteInsertLogic()
        {
            InsertLogic();
        }
        
        protected virtual void ExecuteEditLogic()
        {
            EditLogic();
        }
        
        private void InitializeFilterParameters()
        {
            BrowseFilterParameters parameters;
        }
        
        /// <summary>
        /// Проверка ссылок на валидность.
        /// </summary>
        /// <param name="isDefault">Флаг о том что заполнены поля по умолчанию.</param>
        private bool ValidateReferences(bool isDefault)
        {
            var isValid = true;
            Trace.Write("DIC_MyFirstDictionary", "DIC_MyFirstDictionaryEdit.ValidateReferences.Begin");
        
            Trace.Write("DIC_MyFirstDictionary", "DIC_MyFirstDictionaryEdit.ValidateReferences.End");
            return isValid;
        }

        protected IFilterControl GetFilterControl(DBDataContext db)
        {
            var filterControlInternal = new DIC_MyFirstDictionaryFilter { Page = Page };
            filterControlInternal.SetUrl(Url);
            filterControlInternal.SetDB(db);
            filterControlInternal.SelectedID = SelectedValueKey;
            filterControlInternal.ShowHistory = true;
            return filterControlInternal;
        }

        
        
        /// <summary>
        /// Сохранение формы.
        /// </summary>
        /// <param name="sender">Объект вызвавший событие.</param>
        /// <param name="e">Параметры события.</param>
        protected void SaveData(object sender, DirectEventArgs e)
        {
            DIC_MyFirstDictionary originalItem = null;
        
            using (var db = new DBDataContext(DB.Connection ?? SpecificInstances.DbFactory.CreateConnection()))
            {
                // Если запись редактируется, то получаем строку из базы и проверяем версии записи
                if (!IsNew)
                {
                    source.View.DB.Dispose();
                    source.View.DB = db;
                    var row = source.View.GetSelect(SelectedValueKey.Value)
                        .Select(r => new { r.Item, r.CanEdit })
                        .FirstOrDefault();
                    if (row == null)
                    {
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.ERowIsDeletedOrNotHavePermissions);
                        source.View.DB = null;
                        return;
                    }
                    else if (!row.CanEdit)
                    {
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.EDoesNotHavePermitForEdit);
                        source.View.DB = null;
                        return;
                    }
        
                    originalItem = row.Item;
                    source.View.DB = new DBDataContext(DB.Connection ?? SpecificInstances.DbFactory.CreateConnection());
                    if (originalItem == null)
                    {
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.ERowIsDeletedOrNotHavePermissions);
                        return;
                    }
                    
                    var rowVersion = Convert.ToBase64String(originalItem.RowVersion.ToArray());
                    if (rowVersion != rowVersionHiddenField.Text)
                    {
                        // todo: подумать о реализации конкурентных изменений
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.ERecordModifiedByOther);
                        return;
                    }
                }
        
                if (SaveData(originalItem))
                {
                    if (!IsNew && Url.QueryParameters.ContainsKey("MultipleEdit"))
                    {
                        var keys = Url.QueryParameters["MultipleEdit"].Split(new[] {','}, StringSplitOptions.RemoveEmptyEntries).Select(r => Convert.ToInt64(r)).ToArray();
                        var data = source.View.GetSelect().Where(r => keys.Contains(r.id)).Where(r => r.CanEdit);
                        foreach(var otherRow in data)
                            SaveData(otherRow.Item);
                    }
        
                    IsNew = false;
                    IsRead = false;
                    Info.IsEdit = true;
                    editlogicExecuted = false;
                    insertlogicExecuted = false;
                    readlogicExecuted = false;
                    source.View.DB.Dispose();
                    source.View.DB = new DBDataContext(DB.Connection ?? SpecificInstances.DbFactory.CreateConnection());
                    UpdateForm(true);
        
                    ResourceManager.AddInstanceScript(
                        string.Format(
                            "if (window.frameElement != null && window.frameElement.CloseOnSaveSuccessfull != null)\r\n" +
                            "    window.frameElement.CloseOnSaveSuccessfull({0});",
                            SelectedValueKey));
                }
            }
        }
        
        protected bool SaveData(DIC_MyFirstDictionary originalItem)
        {
            // Выполняем логику формы
            EnsureLogicExecute();
        
            // Валидируем
            var valid = ValidateInfo();
            var newItem = GetNewItem(originalItem);
            valid = valid & ValidateReferences(false);
            if (!valid) return false;
        
            // Добавляем запись в модель на обновление или добавление
            if (IsNew)
            {
                if (!AccessOptions.CheckPermitAdd())
                {
                    AddErrorMessage(Nat.Web.Controls.Properties.Resources.EDoesNotHavePermitForAdd);
                    return false;
                }
        
                DB.DIC_MyFirstDictionaries.InsertOnSubmit(newItem);
                OnInserting(newItem);
                Inserting(newItem);
            }
            else
            {
                DB.DIC_MyFirstDictionaries.Attach(newItem, originalItem);
                OnUpdating(newItem, originalItem);
                Updating(originalItem, newItem);
            }
        
            // todo: разрулить Exception на базе
            // Обновляем в БД
            try
            {
                DB.SubmitChanges();
        
                // Вызываем события о том что обновленно
                if (IsNew)
                {
                    OnInserted(true, newItem);
                    OnInsertedPartial(newItem, true);
                }
                else
                {
                    OnUpdated(true, newItem);
                    OnUpdatedPartial(newItem, originalItem, true);
                }
        
                SelectedValueKey = refDIC_MyFirstDictionary;
                return true;
            }
            catch (SqlException ex)
            {
                if (ex.Errors[0].Number > 50000)
                    AddErrorMessage(ex.Errors[0].Message);
                else
                    X.Msg.Alert("Exception", ex.ToString()).Show();
                return false;
            }
            catch(Exception ex)
            {
                X.Msg.Alert("Exception", ex.ToString()).Show();
                return false;
            }
        }
        
        /// <summary>
        /// Получение новой строки для вставки или обновления.
        /// </summary>
        /// <param name="originalValues">Строка с оригинальными значениями.</param>
        protected DIC_MyFirstDictionary GetNewItem(DIC_MyFirstDictionary originalValues)
        {
            DIC_MyFirstDictionary newItem;
        
            // Создание нового элемента
            if (originalValues == null)
                newItem = new DIC_MyFirstDictionary();
            else
            {
                // Создание нового элемента и копирование из оригинала значений полей
                newItem = new DIC_MyFirstDictionary
                    {
                        id = originalValues.id,
                        RowVersion = originalValues.RowVersion,
                    };
            }
        
            // Получение значений полей из Info
            if (!string.IsNullOrEmpty(Info.Code))
                newItem.Code = Info.Code;
            else
                newItem.Code = null;
            if (!string.IsNullOrEmpty(Info.Name))
                newItem.Name = Info.Name;
            else
                newItem.Name = null;
            if (Info.DateStart != null)
                newItem.DateStart = (DateTime)Info.DateStart;
            else
                newItem.DateStart = default(DateTime);
            if (Info.DateEnd != null)
                newItem.DateEnd = Info.DateEnd;
            else
                newItem.DateEnd = null;
        
            return newItem;
        }
        
        /// <summary>
        /// Проверка данных на валидность.
        /// </summary>
        protected bool ValidateInfo()
        {
            EnsureActivityControllerInitialized();
            ActivityController.ComputeActivities();
            EnsureValidateInformationFormInitialized();
        
            var valid = ValidateInformationForm.Validate();
            valid = valid & ValidateField_Code();
            valid = valid & ValidateField_Name();
            valid = valid & ValidateField_DateStart();
            valid = valid & ValidateField_DateEnd();
        
            return valid;
        }
        
        partial void ValidateField_Code(ref bool valid);
        
        private bool ValidateField_Code()
        {
            var valid = true;
            if (ActivityController.CodeControl.AllowRequiredValidate || ValidateInformationForm.IsRequired("Code"))
                valid = !string.IsNullOrEmpty(Info.Code);
        
            if (!valid)
            {
                AddErrorMessage(GetRequiredMessage_Code());
                return false;
            }
        
            if (ActivityController.CodeControl.AllowValidate)
                ValidateField_Code(ref valid);
        
            return valid;
        }
        
        partial void ValidateField_Name(ref bool valid);
        
        private bool ValidateField_Name()
        {
            var valid = true;
            if (ActivityController.NameControl.AllowRequiredValidate || ValidateInformationForm.IsRequired("Name"))
                valid = !string.IsNullOrEmpty(Info.Name);
        
            if (!valid)
            {
                AddErrorMessage(GetRequiredMessage_Name());
                return false;
            }
        
            if (ActivityController.NameControl.AllowValidate)
                ValidateField_Name(ref valid);
        
            return valid;
        }
        
        partial void ValidateField_DateStart(ref bool valid);
        
        private bool ValidateField_DateStart()
        {
            var valid = true;
            if (ActivityController.DateStartControl.AllowRequiredValidate || ValidateInformationForm.IsRequired("DateStart"))
                valid = Info.DateStart != null;
        
            if (!valid)
            {
                AddErrorMessage(GetRequiredMessage_DateStart());
                return false;
            }
        
            if (ActivityController.DateStartControl.AllowValidate)
                ValidateField_DateStart(ref valid);
        
            return valid;
        }
        
        partial void ValidateField_DateEnd(ref bool valid);
        
        private bool ValidateField_DateEnd()
        {
            var valid = true;
            if (ActivityController.DateEndControl.AllowRequiredValidate || ValidateInformationForm.IsRequired("DateEnd"))
                valid = Info.DateEnd != null;
        
            if (!valid)
            {
                AddErrorMessage(GetRequiredMessage_DateEnd());
                return false;
            }
        
            if (ActivityController.DateEndControl.AllowValidate)
                ValidateField_DateEnd(ref valid);
        
            return valid;
        }
        
        private void UpdateForm(bool loadRow)
        {
            if (!IsPostBack)
                loadRow = true;
        
            if (IsRead)
                Info.IsRead = true;
        
            if (!IsNew && loadRow)
            {
                var row = SelectedValueKey == null ? null : source.View.GetSelect(SelectedValueKey.Value).FirstOrDefault();
                if (row == null)
                {
                    if (SelectedValueKey != null)
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.ERowIsDeletedOrNotHavePermissions);
                    SelectedValueKey = null;
                    IsRead = true;
                    Info.IsRead = true;
                    FormPanelDIC_MyFirstDictionary.Hidden = true;
                    return;
                }
        
                if (!AccessOptions.CheckPermitEdit())
                {
                    if (!IsRead)
                        AddErrorMessage(Nat.Web.Controls.Properties.Resources.EDoesNotHavePermitForEdit);
                    IsRead = true;
                    Info.IsRead = true;
                }
                else if (!row.CanEdit)
                {
                    if (!IsRead)
                    {
                        var messages = source.View.GetEditErrors(SelectedValueKey.Value, DIC_MyFirstDictionaryResources.Header);
                        if (messages.All(string.IsNullOrEmpty))
                            AddErrorMessage(Nat.Web.Controls.Properties.Resources.EDoesNotHavePermitForEdit);
                        else
                            AddErrorMessage(messages.Where(r => !string.IsNullOrEmpty(r)));
                    }
        
                    IsRead = true;
                    Info.IsRead = true;
                }
        
                rowVersionHiddenField.Text = Convert.ToBase64String(row.Item.RowVersion.ToArray());
                object data;
        
                FormPanelDIC_MyFirstDictionary.SetValues(
                    new 
                        {
                            row.Item.Code,
                            row.Item.Name,
                            row.Item.DateStart,
                            row.Item.DateEnd,
                        });
                UpdateForm(row.Item);
                FormPanelDIC_MyFirstDictionary.DataBind();
            }
            else if (IsNew && !AccessOptions.CheckPermitAdd())
            {
                AddErrorMessage(Nat.Web.Controls.Properties.Resources.EDoesNotHavePermitForAdd);
                IsNew = false;
                IsRead = true;
                Info.IsRead = true;
                UpdateFormToNull();
            }
            else if (IsNew && loadRow)
            {
                var messages = source.View.AllowAddRowForTableTypes(NavigatorControl.Values, DIC_MyFirstDictionaryResources.Header).ToList();
                if (messages.Any(r => !string.IsNullOrEmpty(r)))
                {
                    foreach(var message in messages.Where(r => !string.IsNullOrEmpty(r)))
                        AddErrorMessage(message);
                    IsNew = false;
                    IsRead = true;
                    Info.IsRead = true;
                    UpdateFormToNull();
                }
                else if (messages.Any(string.IsNullOrEmpty))
                {
                    AddErrorMessage(Nat.Web.Controls.Properties.Resources.EDoesNotHavePermitForAdd);
                    IsNew = false;
                    IsRead = true;
                    Info.IsRead = true;
                    UpdateFormToNull();
                }
                else
                {
                    rowVersionHiddenField.Text = string.Empty;
                    FormPanelDIC_MyFirstDictionary.SetValues(null);
                    UpdateFormToNull();
                    FormPanelDIC_MyFirstDictionary.DataBind();
                }
            }
        }
        
        private void UpdateForm(DIC_MyFirstDictionary row)
        {
            Info.Code = row.Code;
            Info.Name = row.Name;
            Info.DateStart = row.DateStart;
            Info.DateEnd = row.DateEnd;
        }
        
        private void UpdateFormToNull()
        {
            Info.Code = null;
            Info.Name = null;
            Info.DateStart = null;
            Info.DateEnd = null;
        }
        
        private void GenerateHtmlAdditionalButtonsInternal()
        {
            var toolbar = FormPanelDIC_MyFirstDictionary.BottomBar.First();
            Action<AbstractComponent> addButton = commponent => toolbar.Items.Add(commponent);
            Action<AbstractComponent, AbstractComponent> insertAfterButton = (commponent, after) => toolbar.Items.Insert(toolbar.Items.IndexOf(after) + 1, commponent);
            var buttons = new AdditionalButtons(addButton, insertAfterButton);
            GenerateAdditionalButtons(buttons);
        }
        
        private void InitComboBoxViews()
        {
        }
        
        protected override IWorkFlow[] CreateWorkFlows()
        {
            return new IWorkFlow[] {};
        }
        
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            InitConnection();
            GenerateHtmlAdditionalButtonsInternal();
            InitControlPanels();
            InitComboBoxViews();
        }
        
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
        
            if (!IsPostBack || IsFirstCreation)
                _isStartAction = true;
        
            UpdateForm(false);
        }
        
        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
        
            EnsureLogicExecute();
            EnsureActivityControllerInitialized();
            ActivityController.ComputeActivities();
            EnsureValidateInformationFormInitialized();
        
            if (!DesignMode)
                ScriptManager.GetCurrent(Page).RegisterScriptControl(this);
        
            if ((IsNew && AccessOptions.CheckPermitAdd()) || (!IsRead && AccessOptions.CheckPermitEdit()))
            {
                SaveButton.Show();
                SaveButton.Hidden = false;
            }
            else
            {
                SaveButton.Hide();
                SaveButton.Hidden = true;
            }
            OnPreRender();
        }
        
        protected override void Render(HtmlTextWriter writer)
        {
            base.Render(writer);
            if (!DesignMode)
                ScriptManager.GetCurrent(Page).RegisterScriptDescriptors(this);
        }
        
        IEnumerable<ScriptDescriptor> IScriptControl.GetScriptDescriptors()
        {
            if (FormPanelDIC_MyFirstDictionary.Hidden)
                return new ScriptDescriptor[0];
            return ((IScriptControl)ActivityController).GetScriptDescriptors();
        }
        
        IEnumerable<ScriptReference> IScriptControl.GetScriptReferences()
        {
            return ((IScriptControl)ActivityController).GetScriptReferences();
        }
        
        
        private void SetDefaultValues()
        {
            _setDefaultValues = true;
        }
        
        
        
        public void EnsureInitedDefaultValue(Type type)
        {
            if (!IsStartAction || _setDefaultValues || _isNoPermit || !IsNew) return;
        }
        
        private void SetDefaultValues(DIC_MyFirstDictionary item)
        {
            var properties = GetDefaultProperties();
        }
        
        protected void EnsureActivityControllerInitialized()
        {
            if (ActivityControllerInitialized)
                return;
            ActivityControllerInitialized = true;
            ActivityController = new DIC_MyFirstDictionaryActivityController();
            var dic = GetValuesForActivityController();
            ActivityController.Initialize(this, dic, Info);
        }
        
        private Dictionary<string, object> GetValuesForActivityController()
        {
            var dic = new Dictionary<string, object>();
            dic["Code"] = Info.Code;
            dic["Name"] = Info.Name;
            dic["DateStart"] = Info.DateStart;
            dic["DateEnd"] = Info.DateEnd;
        
            return dic;
        }
        
        protected void EnsureValidateInformationFormInitialized()
        {
            if (ValidateInformationFormInitialized)
                return;
        
            ValidateInformationFormInitialized = true;
            ValidateInformationForm = 
                new DIC_MyFirstDictionaryValidateInformationForm(FormPanelDIC_MyFirstDictionary)
                    {
                        ValidationGroup = "DIC_MyFirstDictionary",
                    };
        
        
            GetValidators_Code(ValidateInformationForm.Code);
            ValidateInformationForm.AddDefaultValidatorsForCode(Info);
            ValidateInformationForm.ApplyValidators(
                new ValidateInformationFormApplyArgsInfo
                    {
                        ValidatorCode = "Code",
                        Control = Info.CodeControl,
                        ReadOnly = ActivityController.CodeControl.ReadOnly,
                        ValidationContainer = "phCode",
                    });
        
            GetValidators_Name(ValidateInformationForm.Name);
            ValidateInformationForm.AddDefaultValidatorsForName(Info);
            ValidateInformationForm.ApplyValidators(
                new ValidateInformationFormApplyArgsInfo
                    {
                        ValidatorCode = "Name",
                        Control = Info.NameControl,
                        ReadOnly = ActivityController.NameControl.ReadOnly,
                        ValidationContainer = "phName",
                    });
        
            GetValidators_DateStart(ValidateInformationForm.DateStart);
            ValidateInformationForm.AddDefaultValidatorsForDateStart(Info);
            ValidateInformationForm.ApplyValidators(
                new ValidateInformationFormApplyArgsInfo
                    {
                        ValidatorCode = "DateStart",
                        Control = Info.DateStartControl,
                        ReadOnly = ActivityController.DateStartControl.ReadOnly,
                        ValidationContainer = "phDateStart",
                    });
        
            GetValidators_DateEnd(ValidateInformationForm.DateEnd);
            ValidateInformationForm.AddDefaultValidatorsForDateEnd(Info);
            ValidateInformationForm.ApplyValidators(
                new ValidateInformationFormApplyArgsInfo
                    {
                        ValidatorCode = "DateEnd",
                        Control = Info.DateEndControl,
                        ReadOnly = ActivityController.DateEndControl.ReadOnly,
                        ValidationContainer = "phDateEnd",
                    });
        }
        
        private void SetReadOnlyValues(DIC_MyFirstDictionary item)
        {
        }
        
        private void SetOtherValues(DIC_MyFirstDictionary item)
        {
        }
        
        private void SetMultipleKeyValues(DIC_MyFirstDictionary item)
        {
        }
        
        private void UploadFilesUpdateItem(DIC_MyFirstDictionary item)
        {
        }
        
        private void UploadFiles()
        {
        }

        public void RemoteValidationFields(object sender, RemoteValidationEventArgs e)
        {
            var value = (JValue)e.Value;
            e.Success = true;
            switch (e.Name)
            {
                case "Code":
                    RemoteValidation_Code(value, e);
                    break;
                case "Name":
                    RemoteValidation_Name(value, e);
                    break;
                case "DateStart":
                    RemoteValidation_DateStart(value, e);
                    break;
                case "DateEnd":
                    RemoteValidation_DateEnd(value, e);
                    break;
            }
        }

        #endregion
        
        #region Events
        
        protected void lds_Inserted(object sender, LinqDataSourceStatusEventArgs e)
        {
            var row = e.Result as DIC_MyFirstDictionary;
            OnInserted(row != null, row);
            OnInserted(e);
        
            if (row != null && !HasErrors)
            {
                if (DB.Transaction != null)
                    CommitDBTransaction();
            }
        }
        
        protected void lds_Updated(object sender, LinqDataSourceStatusEventArgs e)
        {
            var row = e.Result as DIC_MyFirstDictionary;
            var hasRow = row != null;
            OnUpdated(hasRow, row);
            OnUpdated(e);
        
            if (row != null && !HasErrors)
            {
                if (DB.Transaction != null)
                    CommitDBTransaction();
            }
        }
        
        protected void OnInserted(bool inserted, DIC_MyFirstDictionary row)
        {
            if (inserted)
            {
               refDIC_MyFirstDictionary = row.id;
            }
        
            foreach (var logic in logics)
            {
                var errors = logic.AfterSave(inserted, row);
                if (errors != null && errors.Count > 0)
                {
                    foreach(var message in errors)
                        AddErrorMessage(message);
                    break;
                }
            }
        
                #region InsertChildCollections
            if (row != null)
            {
                
            }
            #endregion
        
            if (row != null)
            {
                foreach (var wf in WorkFlows)
                {
                    wf.DataContext = DB;
                    wf.BaseControlInfo = Info;
                    wf.JournalControl = this;
                    wf.OnInserted(row);
                }
            }
        }
        
        protected void OnUpdated(bool updated, DIC_MyFirstDictionary row)
        {
            if (updated)
            {
                refDIC_MyFirstDictionary = row.id;
                UpdateRefDIC_MyFirstDictionary(row);
            }
        
            foreach (var logic in logics)
            {
                var errors = logic.AfterSave(updated, row);
                if (errors != null && errors.Count > 0)
                {
                    foreach(var message in errors)
                        AddErrorMessage(message);
                    break;
                }
            }
        
            #region UpdateChildCollections
            if (row != null)
            {
                
            }
            #endregion
        
            if (row != null)
            {
                foreach (var wf in WorkFlows)
                {
                    wf.DataContext = DB;
                    wf.BaseControlInfo = Info;
                    wf.JournalControl = this;
                    wf.OnUpdated(row, refDIC_MyFirstDictionary.ToString());
                }
            }
        }
        
        protected void ldsChanges_Selecting(object sender, LinqDataSourceSelectEventArgs e)
        {
        }
        
        protected void lds_Selecting(object sender, LinqDataSourceSelectEventArgs e)
        {
        }
        
        protected void lds_Updating(object sender, LinqDataSourceUpdateEventArgs e)
        {
            if (e.Exception != null)
            {
                AddErrorMessage(e.Exception.Message);
                LogMonitor.LogException(e.Exception);
                e.ExceptionHandled = true;
                return;
            }
        
            SetReadOnlyValues((DIC_MyFirstDictionary)e.NewObject);
            SetMultipleKeyValues((DIC_MyFirstDictionary)e.NewObject);
            SetOtherValues((DIC_MyFirstDictionary)e.NewObject);
            e.Cancel = !Updating((DIC_MyFirstDictionary)e.OriginalObject, (DIC_MyFirstDictionary)e.NewObject);
        }
        
        protected void ldsChanges_Updating(object sender, LinqDataSourceUpdateEventArgs e)
        {
            if (e.Exception != null)
            {
                AddErrorMessage(e.Exception.Message);
                LogMonitor.LogException(e.Exception);
                e.ExceptionHandled = true;
                return;
            }
        
            SetReadOnlyValues((DIC_MyFirstDictionary)e.NewObject);
            SetMultipleKeyValues((DIC_MyFirstDictionary)e.NewObject);
            SetOtherValues((DIC_MyFirstDictionary)e.NewObject);
            e.Cancel = !Updating((DIC_MyFirstDictionary)e.OriginalObject, (DIC_MyFirstDictionary)e.NewObject);
        }
        
        protected void lds_Inserting(object sender, LinqDataSourceInsertEventArgs e)
        {
            if (e.Exception != null)
            {
                AddErrorMessage(e.Exception.Message);
                LogMonitor.LogException(e.Exception);
                e.ExceptionHandled = true;
                return;
            }
        
            SetReadOnlyValues((DIC_MyFirstDictionary)e.NewObject);
            SetMultipleKeyValues((DIC_MyFirstDictionary)e.NewObject);
            SetOtherValues((DIC_MyFirstDictionary)e.NewObject);
            e.Cancel = !Inserting((DIC_MyFirstDictionary) e.NewObject);
        }
        
        protected void ldsChanges_Inserting(object sender, LinqDataSourceInsertEventArgs e)
        {
            if (e.Exception != null)
            {
                AddErrorMessage(e.Exception.Message);
                LogMonitor.LogException(e.Exception);
                e.ExceptionHandled = true;
                return;
            }
        
            SetReadOnlyValues((DIC_MyFirstDictionary)e.NewObject);
            SetMultipleKeyValues((DIC_MyFirstDictionary)e.NewObject);
            SetOtherValues((DIC_MyFirstDictionary)e.NewObject);
            e.Cancel = !Inserting((DIC_MyFirstDictionary) e.NewObject);
        }
        
        protected void Source_Selecting(object sender, DataSourceSelectingEventArgs e)
        {
            e.FilterControl = GetFilterControl((DBDataContext)e.DB);
        }
        
        protected void lds_ContextCreating(object sender, LinqDataSourceContextEventArgs e)
        {
            OnContextCreating(e);
            e.ObjectInstance = DB;
        }
        
        protected void lds_ContextDisposing(object sender, LinqDataSourceDisposeEventArgs e)
        {
            if (_db != null && _db.Transaction != null)
                RollbackDBTransaction();
            _db = null;
            var d = (IDisposable)e.ObjectInstance;
            d.Dispose();
        }
        
        #endregion

        #region Permission
        
        bool IAccessControl.CheckPermit(Page page)
        {
            return AccessOptions.CheckPermit();
        }
        
        #endregion

        #region Log
        
        private LogMonitor _logMonitor;
        protected LogMonitor LogMonitor
        {
            get
            {
                if(_logMonitor == null)
                {
                    _logMonitor = new LogMonitor();
                    _logMonitor.Init();
                }
                return _logMonitor;
            }
        }

        protected bool Inserting(DIC_MyFirstDictionary newRow)
        {
        
            return true;
        }

        protected bool Updating(DIC_MyFirstDictionary originalRow, DIC_MyFirstDictionary newRow)
        {
        
            return true;
        }
        
        #endregion

        #region EMailMessages

            

        #endregion
        
        #region Methods for help to show messages

        public static string GetRequiredMessage(string group, string header)
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SRequiredFieldMessage, GenerationHelper.GetHeaderName(group, header));
        }
        /// <summary>
        /// Сообщение об обязательности поля 'System code'.
        /// </summary>
        public static string GetRequiredMessage_Code()
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SRequiredFieldMessage, GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.Code__Group, DIC_MyFirstDictionaryResources.Code__Header));
        }
        
        /// <summary>
        /// Сообщение об обязательности поля 'Name'.
        /// </summary>
        public static string GetRequiredMessage_Name()
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SRequiredFieldMessage, GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.Name__Group, DIC_MyFirstDictionaryResources.Name__Header));
        }
        
        /// <summary>
        /// Сообщение об обязательности поля 'Date time Start'.
        /// </summary>
        public static string GetRequiredMessage_DateStart()
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SRequiredFieldMessage, GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.DateStart__Group, DIC_MyFirstDictionaryResources.DateStart__Header));
        }
        
        /// <summary>
        /// Сообщение об обязательности поля 'Date time End'.
        /// </summary>
        public static string GetRequiredMessage_DateEnd()
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SRequiredFieldMessage, GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.DateEnd__Group, DIC_MyFirstDictionaryResources.DateEnd__Header));
        }
        
        public static string GetMaxLengthMessage(int length)
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SMaxLength, length);
        }
        /// <summary>
        /// Сообщение о максимальной длине 4 поля 'System code'.
        /// </summary>
        public static string GetMaxLengthOfField_Code()
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SMaxLengthOfField, GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.Code__Group, DIC_MyFirstDictionaryResources.Code__Header), 4);
        }
        
        /// <summary>
        /// Сообщение о максимальной длине 255 поля 'Name'.
        /// </summary>
        public static string GetMaxLengthOfField_Name()
        {
            return string.Format(Nat.Web.Controls.Properties.Resources.SMaxLengthOfField, GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.Name__Group, DIC_MyFirstDictionaryResources.Name__Header), 255);
        }
        
        
        
        /// <summary>
        /// Заголовок колнки 'System code'. Берется из ресурсов с учетов группы.
        /// </summary>
        public static string GetHeaderOfColumn_Code()
        {
            return GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.Code__Group, DIC_MyFirstDictionaryResources.Code__Header);
        }
        
        /// <summary>
        /// Заголовок колнки 'Name'. Берется из ресурсов с учетов группы.
        /// </summary>
        public static string GetHeaderOfColumn_Name()
        {
            return GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.Name__Group, DIC_MyFirstDictionaryResources.Name__Header);
        }
        
        /// <summary>
        /// Заголовок колнки 'Date time Start'. Берется из ресурсов с учетов группы.
        /// </summary>
        public static string GetHeaderOfColumn_DateStart()
        {
            return GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.DateStart__Group, DIC_MyFirstDictionaryResources.DateStart__Header);
        }
        
        /// <summary>
        /// Заголовок колнки 'Date time End'. Берется из ресурсов с учетов группы.
        /// </summary>
        public static string GetHeaderOfColumn_DateEnd()
        {
            return GenerationHelper.GetHeaderName(DIC_MyFirstDictionaryResources.DateEnd__Group, DIC_MyFirstDictionaryResources.DateEnd__Header);
        }
        
        #endregion

        #region Nested type: ControlInfo

        public partial class ControlInfo : BaseControlInfo
        {
            private Dictionary<string, object> savedValues;
            private DIC_MyFirstDictionaryEdit edit;
            private TextBox _CodeControl;
            public const int CodeLength = 4;
            
            private TextBox _NameControl;
            public const int NameLength = 255;
            
            private DatePicker _DateStartControl;
            
            
            private DatePicker _DateEndControl;
            
            
            private bool isWireToChangesEvents;
            private bool isWireToEditFieldEvents;
            private DBDataContext _db;

            public DBDataContext DB
            {
                get
                {
                    if (_db == null)
                    {
                        _db = new DBDataContext(SpecificInstances.DbFactory.CreateConnection());
                    }

                    return _db;
                }
                set
                {
                    _db = value;
                }
            }

            public ControlInfo(DIC_MyFirstDictionaryEdit edit)
                : base (edit.FormPanelDIC_MyFirstDictionary)
            {
                this.edit = edit;
                GetSelectedValue = () => edit.SelectedValueKey.ToString();
            }


            /// <summary>
            /// System code.
            /// </summary>
            public String Code
            {
                get
                {
                    if (CodeControl.IsEmpty)
                        return null;
                    var value = CodeControl.Text;
            
                    return Convert.ToString(value);
                }
                set
                {
                    CodeControl.SetValue(value);
                }
            }

            /// <summary>
            /// Контрол поля "System code".
            /// </summary>
            public TextBox CodeControl
            {
                get
                {
                    if (_CodeControl == null)
                        _CodeControl = (TextBox)FindControl("tbCode");
                    return _CodeControl;
                }
            }

            /// <summary>
            /// Флаг об изменении пользователем значения поля "System code", за последний раз.
            /// </summary>
            public bool IsCodeChanged { get; set; }

            /// <summary>
            /// Name.
            /// </summary>
            public String Name
            {
                get
                {
                    if (NameControl.IsEmpty)
                        return null;
                    var value = NameControl.Text;
            
                    return Convert.ToString(value);
                }
                set
                {
                    NameControl.SetValue(value);
                }
            }

            /// <summary>
            /// Контрол поля "Name".
            /// </summary>
            public TextBox NameControl
            {
                get
                {
                    if (_NameControl == null)
                        _NameControl = (TextBox)FindControl("tbName");
                    return _NameControl;
                }
            }

            /// <summary>
            /// Флаг об изменении пользователем значения поля "Name", за последний раз.
            /// </summary>
            public bool IsNameChanged { get; set; }

            /// <summary>
            /// Date time Start.
            /// </summary>
            public DateTime? DateStart
            {
                get
                {
                    if (DateStartControl.IsEmpty)
                        return null;
                    var value = DateStartControl.RawValue;
            
                    return Convert.ToDateTime(value);
                }
                set
                {
                    DateStartControl.RawValue = string.Format("{0:d}", value);DateStartControl.SetValue(value);
                }
            }

            /// <summary>
            /// Контрол поля "Date time Start".
            /// </summary>
            public DatePicker DateStartControl
            {
                get
                {
                    if (_DateStartControl == null)
                        _DateStartControl = (DatePicker)FindControl("dpDateStart");
                    return _DateStartControl;
                }
            }

            /// <summary>
            /// Флаг об изменении пользователем значения поля "Date time Start", за последний раз.
            /// </summary>
            public bool IsDateStartChanged { get; set; }

            /// <summary>
            /// Date time End.
            /// </summary>
            public DateTime? DateEnd
            {
                get
                {
                    if (DateEndControl.IsEmpty)
                        return null;
                    var value = DateEndControl.RawValue;
            
                    return Convert.ToDateTime(value);
                }
                set
                {
                    DateEndControl.RawValue = string.Format("{0:d}", value);DateEndControl.SetValue(value);
                }
            }

            /// <summary>
            /// Контрол поля "Date time End".
            /// </summary>
            public DatePicker DateEndControl
            {
                get
                {
                    if (_DateEndControl == null)
                        _DateEndControl = (DatePicker)FindControl("dpDateEnd");
                    return _DateEndControl;
                }
            }

            /// <summary>
            /// Флаг об изменении пользователем значения поля "Date time End", за последний раз.
            /// </summary>
            public bool IsDateEndChanged { get; set; }

            public override void WireToChangesEvent()
            {
                if (edit.SelectedValueKey != null && edit.IsRead || isWireToChangesEvents || (edit.SelectedValueKey != null && !edit.IsNew && !edit.IsRead && string.IsNullOrEmpty(SelectedValue)))
                    return;

                isWireToChangesEvents = true;
                CodeControl.TextChanged += delegate { IsCodeChanged = true; };
                NameControl.TextChanged += delegate { IsNameChanged = true; };
                DateStartControl.TextChanged += delegate { IsDateStartChanged = true; };
                DateEndControl.TextChanged += delegate { IsDateEndChanged = true; };
            }

            public override void WireToEditFieldEvents()
            {
                if (isWireToEditFieldEvents || (!(edit.IsNew) && string.IsNullOrEmpty(SelectedValue))) 
                    return;

                isWireToEditFieldEvents = true;
            }

            public override void ClearRefToControls()
            {
                _CodeControl = null;
                _NameControl = null;
                _DateStartControl = null;
                _DateEndControl = null;
                isWireToChangesEvents = false;
                isWireToEditFieldEvents = false;
            }

            public override bool HasSavedValues
            {
                get { return savedValues != null; }
            }

            public override void SaveValues()
            {
                if (savedValues == null)
                    savedValues = new Dictionary<string, object>();
                else
                    savedValues.Clear();

                savedValues.Add("Code", CodeControl.Text);
                savedValues.Add("Name", NameControl.Text);
                savedValues.Add("DateStart", DateStartControl.SelectedValue);
                savedValues.Add("DateEnd", DateEndControl.SelectedValue);
            }

            public override void LoadValues()
            {
                if (savedValues == null)
                    throw new NullReferenceException("Before execute LoadValues need execute SaveValues");

                CodeControl.Text = (string)savedValues["Code"];
                NameControl.Text = (string)savedValues["Name"];
                DateStartControl.SelectedValue = savedValues["DateStart"];
                DateEndControl.SelectedValue = savedValues["DateEnd"];
            }

            public override void SetValue(string property, object value, string text, string alternativeText)
            {
                switch (property)
                {                    default:
                        throw new Exception(string.Format("property '{0}' not exist in table 'DIC_MyFirstDictionary'", property));
                }
            }

/*
            private IList<WebControl> _controls;
            public IList<WebControl> Controls
            {
                get
                {
                    if (_controls == null)
                    {
                        _controls = new List<WebControl>
                                        {
                                            CodeControl,
                                            NameControl,
                                            DateStartControl,
                                            DateEndControl,
                                        };
                    }
                    return _controls;
                }
            }*/
        }

        public partial class RecordEvents : BaseRecordEvents<long, DIC_MyFirstDictionary>
        {
            private DBDataContext _db;
        
            protected DBDataContext DB
            {
                get
                {
                    if (_db == null)
                    {
                        _db = new DBDataContext(SpecificInstances.DbFactory.CreateConnection());
                    }
        
                    return _db;
                }
            }
        
            public long? DIC_MyFirstDictionary
            {
                get
                {
                    if (!Values.ContainsKey(typeof(DIC_MyFirstDictionary))) return null;
                    return (long?)Values[typeof(DIC_MyFirstDictionary)];
                }
                set
                {
                    Values[typeof(DIC_MyFirstDictionary)] = value;
                }
            }
        
            /// <summary>
            /// Не трогать!!! :)
            /// </summary>
            public DIC_MyFirstDictionaryJournalDataSourceView.Row SelectedRow { get; set; }
        }

        #endregion
    }
}
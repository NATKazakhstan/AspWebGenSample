#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleDictionaries
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDIC_MyFirstDictionary(DIC_MyFirstDictionary instance);
    partial void UpdateDIC_MyFirstDictionary(DIC_MyFirstDictionary instance);
    partial void DeleteDIC_MyFirstDictionary(DIC_MyFirstDictionary instance);
    partial void InsertDIC_MySecondDictionary(DIC_MySecondDictionary instance);
    partial void UpdateDIC_MySecondDictionary(DIC_MySecondDictionary instance);
    partial void DeleteDIC_MySecondDictionary(DIC_MySecondDictionary instance);
    partial void InsertMyProduct(MyProduct instance);
    partial void UpdateMyProduct(MyProduct instance);
    partial void DeleteMyProduct(MyProduct instance);
    partial void InsertMyProductAction(MyProductAction instance);
    partial void UpdateMyProductAction(MyProductAction instance);
    partial void DeleteMyProductAction(MyProductAction instance);
    #endregion
		
		public DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DIC_MyFirstDictionary> DIC_MyFirstDictionaries
		{
			get
			{
				return this.GetTable<DIC_MyFirstDictionary>();
			}
		}
		
		public System.Data.Linq.Table<DIC_MySecondDictionary> DIC_MySecondDictionaries
		{
			get
			{
				return this.GetTable<DIC_MySecondDictionary>();
			}
		}
		
		public System.Data.Linq.Table<MyProduct> MyProducts
		{
			get
			{
				return this.GetTable<MyProduct>();
			}
		}
		
		public System.Data.Linq.Table<MyProductAction> MyProductActions
		{
			get
			{
				return this.GetTable<MyProductAction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIC_MyFirstDictionary")]
	public partial class DIC_MyFirstDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _Code;
		
		private string _Name;
		
		private System.DateTime _DateStart;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntitySet<DIC_MySecondDictionary> _DIC_MySecondDictionaries_refFirstDictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public DIC_MyFirstDictionary()
		{
			this._DIC_MySecondDictionaries_refFirstDictionary = new EntitySet<DIC_MySecondDictionary>(new Action<DIC_MySecondDictionary>(this.attach_DIC_MySecondDictionaries_refFirstDictionary), new Action<DIC_MySecondDictionary>(this.detach_DIC_MySecondDictionaries_refFirstDictionary));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="bigint", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="nvarchar(4)", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(255)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="datetime")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="datetime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="timestamp", CanBeNull=true, IsDbGenerated=true)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIC_MyFirstDictionary_DIC_MySecondDictionary_refFirstDictionary", Storage="_DIC_MySecondDictionaries_refFirstDictionary", ThisKey="id", OtherKey="refFirstDictionary")]
		public EntitySet<DIC_MySecondDictionary> DIC_MySecondDictionaries_refFirstDictionary
		{
			get
			{
				return this._DIC_MySecondDictionaries_refFirstDictionary;
			}
			set
			{
				this._DIC_MySecondDictionaries_refFirstDictionary.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIC_MySecondDictionaries_refFirstDictionary(DIC_MySecondDictionary entity)
		{
			this.SendPropertyChanging();
			entity.DIC_MyFirstDictionary_refFirstDictionary = this;
		}
		
		private void detach_DIC_MySecondDictionaries_refFirstDictionary(DIC_MySecondDictionary entity)
		{
			this.SendPropertyChanging();
			entity.DIC_MyFirstDictionary_refFirstDictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIC_MySecondDictionary")]
	public partial class DIC_MySecondDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _Name;
		
		private long _refFirstDictionary;
		
		private System.Nullable<decimal> _DecimalValue;
		
		private bool _BoolValue;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntityRef<DIC_MyFirstDictionary> _DIC_MyFirstDictionary_refFirstDictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnrefFirstDictionaryChanging(long value);
    partial void OnrefFirstDictionaryChanged();
    partial void OnDecimalValueChanging(System.Nullable<decimal> value);
    partial void OnDecimalValueChanged();
    partial void OnBoolValueChanging(bool value);
    partial void OnBoolValueChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public DIC_MySecondDictionary()
		{
			this._DIC_MyFirstDictionary_refFirstDictionary = default(EntityRef<DIC_MyFirstDictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="bigint", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(255)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refFirstDictionary", DbType="bigint")]
		public long refFirstDictionary
		{
			get
			{
				return this._refFirstDictionary;
			}
			set
			{
				if ((this._refFirstDictionary != value))
				{
					if (this._DIC_MyFirstDictionary_refFirstDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrefFirstDictionaryChanging(value);
					this.SendPropertyChanging();
					this._refFirstDictionary = value;
					this.SendPropertyChanged("refFirstDictionary");
					this.OnrefFirstDictionaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecimalValue", DbType="decimal(10,2)")]
		public System.Nullable<decimal> DecimalValue
		{
			get
			{
				return this._DecimalValue;
			}
			set
			{
				if ((this._DecimalValue != value))
				{
					this.OnDecimalValueChanging(value);
					this.SendPropertyChanging();
					this._DecimalValue = value;
					this.SendPropertyChanged("DecimalValue");
					this.OnDecimalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoolValue", DbType="bit")]
		public bool BoolValue
		{
			get
			{
				return this._BoolValue;
			}
			set
			{
				if ((this._BoolValue != value))
				{
					this.OnBoolValueChanging(value);
					this.SendPropertyChanging();
					this._BoolValue = value;
					this.SendPropertyChanged("BoolValue");
					this.OnBoolValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="timestamp", CanBeNull=true, IsDbGenerated=true)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIC_MyFirstDictionary_DIC_MySecondDictionary_refFirstDictionary", Storage="_DIC_MyFirstDictionary_refFirstDictionary", ThisKey="refFirstDictionary", OtherKey="id", IsForeignKey=true)]
		public DIC_MyFirstDictionary DIC_MyFirstDictionary_refFirstDictionary
		{
			get
			{
				return this._DIC_MyFirstDictionary_refFirstDictionary.Entity;
			}
			set
			{
				DIC_MyFirstDictionary previousValue = this._DIC_MyFirstDictionary_refFirstDictionary.Entity;
				if (((previousValue != value) 
							|| (this._DIC_MyFirstDictionary_refFirstDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DIC_MyFirstDictionary_refFirstDictionary.Entity = null;
						previousValue.DIC_MySecondDictionaries_refFirstDictionary.Remove(this);
					}
					this._DIC_MyFirstDictionary_refFirstDictionary.Entity = value;
					if ((value != null))
					{
						value.DIC_MySecondDictionaries_refFirstDictionary.Add(this);
						this._refFirstDictionary = value.id;
					}
					else
					{
						this._refFirstDictionary = default(long);
					}
					this.SendPropertyChanged("DIC_MyFirstDictionary_refFirstDictionary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MyProducts")]
	public partial class MyProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _Name;
		
		private System.DateTime _CreationDate;
		
		private decimal _Price;
		
		private decimal _Amount;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntitySet<MyProductAction> _MyProductActions_refProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public MyProduct()
		{
			this._MyProductActions_refProduct = new EntitySet<MyProductAction>(new Action<MyProductAction>(this.attach_MyProductActions_refProduct), new Action<MyProductAction>(this.detach_MyProductActions_refProduct));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="bigint", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(200)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="date")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="decimal(7,2)")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="decimal(7,2)")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="timestamp", CanBeNull=true, IsDbGenerated=true)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MyProducts_MyProductActions_refProduct", Storage="_MyProductActions_refProduct", ThisKey="id", OtherKey="refProduct")]
		public EntitySet<MyProductAction> MyProductActions_refProduct
		{
			get
			{
				return this._MyProductActions_refProduct;
			}
			set
			{
				this._MyProductActions_refProduct.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MyProductActions_refProduct(MyProductAction entity)
		{
			this.SendPropertyChanging();
			entity.MyProduct_refProduct = this;
		}
		
		private void detach_MyProductActions_refProduct(MyProductAction entity)
		{
			this.SendPropertyChanging();
			entity.MyProduct_refProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MyProductActions")]
	public partial class MyProductAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _refProduct;
		
		private System.DateTime _DateTimeAction;
		
		private decimal _AmountChange;
		
		private string _Note;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntityRef<MyProduct> _MyProduct_refProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnrefProductChanging(long value);
    partial void OnrefProductChanged();
    partial void OnDateTimeActionChanging(System.DateTime value);
    partial void OnDateTimeActionChanged();
    partial void OnAmountChangeChanging(decimal value);
    partial void OnAmountChangeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public MyProductAction()
		{
			this._MyProduct_refProduct = default(EntityRef<MyProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="bigint", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refProduct", DbType="bigint")]
		public long refProduct
		{
			get
			{
				return this._refProduct;
			}
			set
			{
				if ((this._refProduct != value))
				{
					if (this._MyProduct_refProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrefProductChanging(value);
					this.SendPropertyChanging();
					this._refProduct = value;
					this.SendPropertyChanged("refProduct");
					this.OnrefProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeAction", DbType="datetime")]
		public System.DateTime DateTimeAction
		{
			get
			{
				return this._DateTimeAction;
			}
			set
			{
				if ((this._DateTimeAction != value))
				{
					this.OnDateTimeActionChanging(value);
					this.SendPropertyChanging();
					this._DateTimeAction = value;
					this.SendPropertyChanged("DateTimeAction");
					this.OnDateTimeActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountChange", DbType="decimal(7,2)")]
		public decimal AmountChange
		{
			get
			{
				return this._AmountChange;
			}
			set
			{
				if ((this._AmountChange != value))
				{
					this.OnAmountChangeChanging(value);
					this.SendPropertyChanging();
					this._AmountChange = value;
					this.SendPropertyChanged("AmountChange");
					this.OnAmountChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="nvarchar(500)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="timestamp", CanBeNull=true, IsDbGenerated=true)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MyProducts_MyProductActions_refProduct", Storage="_MyProduct_refProduct", ThisKey="refProduct", OtherKey="id", IsForeignKey=true)]
		public MyProduct MyProduct_refProduct
		{
			get
			{
				return this._MyProduct_refProduct.Entity;
			}
			set
			{
				MyProduct previousValue = this._MyProduct_refProduct.Entity;
				if (((previousValue != value) 
							|| (this._MyProduct_refProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MyProduct_refProduct.Entity = null;
						previousValue.MyProductActions_refProduct.Remove(this);
					}
					this._MyProduct_refProduct.Entity = value;
					if ((value != null))
					{
						value.MyProductActions_refProduct.Add(this);
						this._refProduct = value.id;
					}
					else
					{
						this._refProduct = default(long);
					}
					this.SendPropertyChanged("MyProduct_refProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
